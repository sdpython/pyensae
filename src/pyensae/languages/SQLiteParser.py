# Generated from \SQLiteParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,192,2041,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,1,0,5,0,224,8,0,10,0,12,0,227,9,0,1,0,1,0,1,1,
        5,1,232,8,1,10,1,12,1,235,9,1,1,1,1,1,4,1,239,8,1,11,1,12,1,240,
        1,1,5,1,244,8,1,10,1,12,1,247,9,1,1,1,5,1,250,8,1,10,1,12,1,253,
        9,1,1,2,1,2,1,2,3,2,258,8,2,3,2,260,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,286,8,2,1,3,1,3,1,3,1,3,1,3,3,3,293,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,300,8,3,1,3,1,3,1,3,1,3,3,3,306,8,3,1,3,1,3,3,3,310,
        8,3,1,3,3,3,313,8,3,1,4,1,4,1,4,1,4,1,4,3,4,320,8,4,1,4,3,4,323,
        8,4,1,5,1,5,3,5,327,8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,335,8,6,1,6,
        1,6,3,6,339,8,6,3,6,341,8,6,1,7,1,7,3,7,345,8,7,1,8,1,8,3,8,349,
        8,8,1,8,1,8,3,8,353,8,8,1,8,3,8,356,8,8,1,9,1,9,1,9,1,10,1,10,3,
        10,363,8,10,1,10,1,10,1,11,1,11,3,11,369,8,11,1,11,1,11,1,11,1,11,
        3,11,375,8,11,1,11,1,11,1,11,3,11,380,8,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,5,11,389,8,11,10,11,12,11,392,9,11,1,11,1,11,1,11,3,
        11,397,8,11,1,12,1,12,3,12,401,8,12,1,12,1,12,3,12,405,8,12,1,12,
        3,12,408,8,12,1,13,1,13,3,13,412,8,13,1,13,1,13,1,13,1,13,3,13,418,
        8,13,1,13,1,13,1,13,3,13,423,8,13,1,13,1,13,1,13,1,13,1,13,5,13,
        430,8,13,10,13,12,13,433,9,13,1,13,1,13,5,13,437,8,13,10,13,12,13,
        440,9,13,1,13,1,13,1,13,3,13,445,8,13,1,13,1,13,3,13,449,8,13,1,
        14,1,14,3,14,453,8,14,1,14,5,14,456,8,14,10,14,12,14,459,9,14,1,
        15,4,15,462,8,15,11,15,12,15,463,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,476,8,15,1,16,1,16,3,16,480,8,16,1,16,1,16,
        1,16,3,16,485,8,16,1,16,3,16,488,8,16,1,16,3,16,491,8,16,1,16,1,
        16,1,16,3,16,496,8,16,1,16,3,16,499,8,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,513,8,16,1,16,1,16,1,16,
        1,16,1,16,3,16,520,8,16,1,16,1,16,1,16,1,16,1,16,3,16,527,8,16,3,
        16,529,8,16,1,17,3,17,532,8,17,1,17,1,17,1,18,1,18,3,18,538,8,18,
        1,18,1,18,1,18,3,18,543,8,18,1,18,1,18,1,18,1,18,5,18,549,8,18,10,
        18,12,18,552,9,18,1,18,1,18,3,18,556,8,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,569,8,18,10,18,12,18,572,9,
        18,1,18,1,18,1,18,3,18,577,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,
        19,585,8,19,10,19,12,19,588,9,19,1,19,1,19,3,19,592,8,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,602,8,19,1,19,1,19,5,19,606,
        8,19,10,19,12,19,609,9,19,1,19,3,19,612,8,19,1,19,1,19,1,19,3,19,
        617,8,19,3,19,619,8,19,1,20,1,20,1,20,1,20,1,21,1,21,3,21,627,8,
        21,1,21,1,21,1,21,1,21,3,21,633,8,21,1,21,1,21,1,21,3,21,638,8,21,
        1,21,1,21,1,21,1,21,1,21,3,21,645,8,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,5,21,654,8,21,10,21,12,21,657,9,21,3,21,659,8,21,3,21,
        661,8,21,1,21,1,21,1,21,1,21,1,21,3,21,668,8,21,1,21,1,21,3,21,672,
        8,21,1,21,1,21,1,21,1,21,1,21,3,21,679,8,21,1,21,1,21,4,21,683,8,
        21,11,21,12,21,684,1,21,1,21,1,22,1,22,3,22,691,8,22,1,22,1,22,1,
        22,1,22,3,22,697,8,22,1,22,1,22,1,22,3,22,702,8,22,1,22,1,22,1,22,
        1,22,1,22,5,22,709,8,22,10,22,12,22,712,9,22,1,22,1,22,3,22,716,
        8,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,727,8,23,
        1,23,1,23,1,23,3,23,732,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        5,23,741,8,23,10,23,12,23,744,9,23,1,23,1,23,3,23,748,8,23,1,24,
        1,24,3,24,752,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,5,24,766,8,24,10,24,12,24,769,9,24,1,25,1,25,1,25,
        1,25,1,25,5,25,776,8,25,10,25,12,25,779,9,25,1,25,1,25,3,25,783,
        8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,791,8,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,5,27,801,8,27,10,27,12,27,804,9,27,1,27,
        1,27,3,27,808,8,27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,816,8,28,1,
        28,1,28,1,28,1,28,1,28,3,28,823,8,28,1,29,3,29,826,8,29,1,29,1,29,
        1,29,1,29,1,29,3,29,833,8,29,1,29,3,29,836,8,29,1,29,3,29,839,8,
        29,1,30,1,30,3,30,843,8,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,851,
        8,31,1,31,1,31,1,31,3,31,856,8,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,866,8,32,1,32,1,32,1,32,3,32,871,8,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,3,32,880,8,32,1,32,1,32,1,32,5,32,885,8,32,
        10,32,12,32,888,9,32,1,32,3,32,891,8,32,1,32,1,32,3,32,895,8,32,
        1,32,3,32,898,8,32,1,32,1,32,1,32,1,32,5,32,904,8,32,10,32,12,32,
        907,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
        919,8,32,1,32,3,32,922,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,930,
        8,32,1,32,1,32,1,32,1,32,1,32,4,32,937,8,32,11,32,12,32,938,1,32,
        1,32,3,32,943,8,32,1,32,1,32,1,32,3,32,948,8,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,978,
        8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,990,
        8,32,1,32,1,32,1,32,3,32,995,8,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,1007,8,32,1,32,1,32,1,32,1,32,3,32,1013,
        8,32,1,32,1,32,1,32,1,32,1,32,3,32,1020,8,32,1,32,1,32,3,32,1024,
        8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1032,8,32,10,32,12,32,1035,
        9,32,3,32,1037,8,32,1,32,1,32,1,32,1,32,3,32,1043,8,32,1,32,1,32,
        1,32,1,32,3,32,1049,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1056,8,32,
        10,32,12,32,1059,9,32,3,32,1061,8,32,1,32,1,32,3,32,1065,8,32,5,
        32,1067,8,32,10,32,12,32,1070,9,32,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,1078,8,33,1,33,1,33,1,34,1,34,1,35,3,35,1085,8,35,1,35,1,35,
        1,35,1,35,1,35,3,35,1092,8,35,1,35,1,35,1,35,1,35,3,35,1098,8,35,
        1,35,1,35,1,35,3,35,1103,8,35,1,35,1,35,1,35,1,35,5,35,1109,8,35,
        10,35,12,35,1112,9,35,1,35,1,35,3,35,1116,8,35,1,35,1,35,1,35,1,
        35,1,35,5,35,1123,8,35,10,35,12,35,1126,9,35,1,35,1,35,1,35,1,35,
        1,35,1,35,5,35,1134,8,35,10,35,12,35,1137,9,35,1,35,1,35,5,35,1141,
        8,35,10,35,12,35,1144,9,35,1,35,3,35,1147,8,35,1,35,3,35,1150,8,
        35,1,35,1,35,3,35,1154,8,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,1162,
        8,36,10,36,12,36,1165,9,36,1,36,1,36,1,36,3,36,1170,8,36,3,36,1172,
        8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1180,8,36,1,36,1,36,1,36,
        1,36,1,36,3,36,1187,8,36,1,36,1,36,1,36,5,36,1192,8,36,10,36,12,
        36,1195,9,36,1,36,1,36,3,36,1199,8,36,3,36,1201,8,36,1,37,1,37,1,
        37,1,37,3,37,1207,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1216,
        8,37,1,38,1,38,1,38,3,38,1221,8,38,1,39,1,39,1,39,1,39,1,39,3,39,
        1228,8,39,1,39,1,39,3,39,1232,8,39,3,39,1234,8,39,1,40,3,40,1237,
        8,40,1,40,1,40,1,40,1,40,5,40,1243,8,40,10,40,12,40,1246,9,40,1,
        40,3,40,1249,8,40,1,40,3,40,1252,8,40,1,41,1,41,1,41,1,41,3,41,1258,
        8,41,5,41,1260,8,41,10,41,12,41,1263,9,41,1,42,1,42,3,42,1267,8,
        42,1,42,1,42,1,42,5,42,1272,8,42,10,42,12,42,1275,9,42,1,42,1,42,
        1,42,1,42,5,42,1281,8,42,10,42,12,42,1284,9,42,1,42,3,42,1287,8,
        42,3,42,1289,8,42,1,42,1,42,3,42,1293,8,42,1,42,1,42,1,42,1,42,1,
        42,5,42,1300,8,42,10,42,12,42,1303,9,42,1,42,1,42,3,42,1307,8,42,
        3,42,1309,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,
        1320,8,42,10,42,12,42,1323,9,42,3,42,1325,8,42,1,42,1,42,1,42,1,
        42,1,42,5,42,1332,8,42,10,42,12,42,1335,9,42,1,42,1,42,1,42,1,42,
        1,42,1,42,5,42,1343,8,42,10,42,12,42,1346,9,42,1,42,1,42,5,42,1350,
        8,42,10,42,12,42,1353,9,42,3,42,1355,8,42,1,43,1,43,1,44,3,44,1360,
        8,44,1,44,1,44,3,44,1364,8,44,1,44,3,44,1367,8,44,1,45,3,45,1370,
        8,45,1,45,1,45,1,45,3,45,1375,8,45,1,45,1,45,3,45,1379,8,45,1,45,
        4,45,1382,8,45,11,45,12,45,1383,1,45,3,45,1387,8,45,1,45,3,45,1390,
        8,45,1,46,1,46,1,46,3,46,1395,8,46,1,46,1,46,3,46,1399,8,46,1,46,
        3,46,1402,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1409,8,46,1,46,1,46,
        1,46,3,46,1414,8,46,1,46,1,46,1,46,1,46,1,46,5,46,1421,8,46,10,46,
        12,46,1424,9,46,1,46,1,46,3,46,1428,8,46,1,46,3,46,1431,8,46,1,46,
        1,46,1,46,1,46,5,46,1437,8,46,10,46,12,46,1440,9,46,1,46,3,46,1443,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1451,8,46,1,46,3,46,1454,
        8,46,3,46,1456,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1465,
        8,47,1,47,3,47,1468,8,47,3,47,1470,8,47,1,48,1,48,3,48,1474,8,48,
        1,48,1,48,3,48,1478,8,48,1,48,1,48,3,48,1482,8,48,1,48,3,48,1485,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1494,8,49,10,49,12,
        49,1497,9,49,1,49,1,49,3,49,1501,8,49,1,50,1,50,3,50,1505,8,50,1,
        50,1,50,3,50,1509,8,50,1,51,3,51,1512,8,51,1,51,1,51,1,51,3,51,1517,
        8,51,1,51,1,51,1,51,1,51,3,51,1523,8,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1530,8,51,1,51,1,51,1,51,5,51,1535,8,51,10,51,12,51,1538,9,
        51,1,51,1,51,3,51,1542,8,51,1,52,1,52,1,52,1,52,5,52,1548,8,52,10,
        52,12,52,1551,9,52,1,52,1,52,1,53,3,53,1556,8,53,1,53,1,53,1,53,
        3,53,1561,8,53,1,53,1,53,1,53,1,53,3,53,1567,8,53,1,53,1,53,1,53,
        1,53,1,53,3,53,1574,8,53,1,53,1,53,1,53,5,53,1579,8,53,10,53,12,
        53,1582,9,53,1,53,1,53,3,53,1586,8,53,1,53,3,53,1589,8,53,1,53,3,
        53,1592,8,53,1,54,1,54,1,54,3,54,1597,8,54,1,54,1,54,1,54,3,54,1602,
        8,54,1,54,1,54,1,54,1,54,1,54,3,54,1609,8,54,1,55,1,55,3,55,1613,
        8,55,1,55,1,55,3,55,1617,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,
        1,57,3,57,1627,8,57,1,57,1,57,1,57,1,57,1,57,5,57,1634,8,57,10,57,
        12,57,1637,9,57,3,57,1639,8,57,1,57,1,57,1,57,1,57,1,57,5,57,1646,
        8,57,10,57,12,57,1649,9,57,1,57,3,57,1652,8,57,1,57,1,57,1,58,1,
        58,1,58,1,58,3,58,1660,8,58,1,58,1,58,1,58,1,58,1,58,5,58,1667,8,
        58,10,58,12,58,1670,9,58,3,58,1672,8,58,1,58,1,58,1,58,1,58,1,58,
        5,58,1679,8,58,10,58,12,58,1682,9,58,3,58,1684,8,58,1,58,3,58,1687,
        8,58,1,58,3,58,1690,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        3,59,1700,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1709,8,60,
        1,61,1,61,1,61,1,61,1,61,5,61,1716,8,61,10,61,12,61,1719,9,61,1,
        61,3,61,1722,8,61,1,61,1,61,1,62,1,62,1,62,3,62,1729,8,62,1,62,1,
        62,1,62,5,62,1734,8,62,10,62,12,62,1737,9,62,1,62,3,62,1740,8,62,
        1,62,1,62,3,62,1744,8,62,1,63,1,63,1,63,1,63,1,63,5,63,1751,8,63,
        10,63,12,63,1754,9,63,1,63,3,63,1757,8,63,1,63,1,63,3,63,1761,8,
        63,1,63,1,63,1,63,3,63,1766,8,63,1,64,1,64,3,64,1770,8,64,1,64,1,
        64,1,64,5,64,1775,8,64,10,64,12,64,1778,9,64,1,65,1,65,1,65,1,65,
        1,65,5,65,1785,8,65,10,65,12,65,1788,9,65,1,66,1,66,1,66,1,66,3,
        66,1794,8,66,1,67,1,67,1,67,3,67,1799,8,67,1,67,3,67,1802,8,67,1,
        67,1,67,3,67,1806,8,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,1,69,3,69,1820,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,3,70,1832,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,1841,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1850,8,
        72,1,72,1,72,3,72,1854,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,3,72,1864,8,72,1,72,3,72,1867,8,72,1,72,1,72,1,72,1,72,1,72,1,
        72,1,72,3,72,1876,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1885,
        8,72,1,72,3,72,1888,8,72,1,72,1,72,1,72,1,72,3,72,1894,8,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1908,
        8,72,1,72,1,72,3,72,1912,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,3,72,1923,8,72,1,72,1,72,1,72,3,72,1928,8,72,1,73,1,73,
        1,73,1,74,1,74,1,74,1,75,1,75,1,75,4,75,1939,8,75,11,75,12,75,1940,
        1,76,1,76,1,76,4,76,1946,8,76,11,76,12,76,1947,1,77,1,77,1,77,1,
        77,1,78,1,78,3,78,1956,8,78,1,78,1,78,1,78,3,78,1961,8,78,5,78,1963,
        8,78,10,78,12,78,1966,9,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,
        82,1,83,1,83,3,83,1978,8,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,
        87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,
        94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,
        1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,
        1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,3,110,2039,8,110,1,110,2,431,463,1,64,111,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        0,28,3,0,58,58,69,69,82,82,2,0,47,47,66,66,1,0,132,133,2,0,145,145,
        170,170,1,0,8,9,2,0,59,59,140,140,2,0,56,56,104,104,2,0,58,58,82,
        82,5,0,25,25,72,72,81,81,122,122,125,125,4,0,84,84,131,131,137,137,
        144,144,2,0,7,7,12,13,1,0,14,17,1,0,18,21,4,0,77,77,97,97,99,99,
        118,118,3,0,25,25,72,72,125,125,5,0,52,54,104,104,171,172,185,185,
        187,188,2,0,29,29,62,62,3,0,127,127,153,153,178,178,2,0,5,5,106,
        106,1,0,175,176,2,0,34,34,60,60,2,0,150,150,161,161,2,0,158,158,
        165,165,2,0,159,159,166,167,2,0,160,160,162,162,2,0,8,10,102,102,
        2,0,184,184,187,187,1,0,25,179,2317,0,225,1,0,0,0,2,233,1,0,0,0,
        4,259,1,0,0,0,6,287,1,0,0,0,8,314,1,0,0,0,10,324,1,0,0,0,12,332,
        1,0,0,0,14,342,1,0,0,0,16,346,1,0,0,0,18,357,1,0,0,0,20,360,1,0,
        0,0,22,366,1,0,0,0,24,400,1,0,0,0,26,409,1,0,0,0,28,450,1,0,0,0,
        30,461,1,0,0,0,32,479,1,0,0,0,34,531,1,0,0,0,36,537,1,0,0,0,38,578,
        1,0,0,0,40,620,1,0,0,0,42,624,1,0,0,0,44,688,1,0,0,0,46,720,1,0,
        0,0,48,749,1,0,0,0,50,770,1,0,0,0,52,784,1,0,0,0,54,795,1,0,0,0,
        56,815,1,0,0,0,58,825,1,0,0,0,60,840,1,0,0,0,62,846,1,0,0,0,64,947,
        1,0,0,0,66,1071,1,0,0,0,68,1081,1,0,0,0,70,1153,1,0,0,0,72,1155,
        1,0,0,0,74,1202,1,0,0,0,76,1220,1,0,0,0,78,1222,1,0,0,0,80,1236,
        1,0,0,0,82,1253,1,0,0,0,84,1354,1,0,0,0,86,1356,1,0,0,0,88,1359,
        1,0,0,0,90,1369,1,0,0,0,92,1455,1,0,0,0,94,1469,1,0,0,0,96,1484,
        1,0,0,0,98,1500,1,0,0,0,100,1508,1,0,0,0,102,1511,1,0,0,0,104,1543,
        1,0,0,0,106,1555,1,0,0,0,108,1596,1,0,0,0,110,1610,1,0,0,0,112,1618,
        1,0,0,0,114,1624,1,0,0,0,116,1655,1,0,0,0,118,1691,1,0,0,0,120,1701,
        1,0,0,0,122,1710,1,0,0,0,124,1725,1,0,0,0,126,1745,1,0,0,0,128,1767,
        1,0,0,0,130,1779,1,0,0,0,132,1789,1,0,0,0,134,1795,1,0,0,0,136,1807,
        1,0,0,0,138,1819,1,0,0,0,140,1831,1,0,0,0,142,1840,1,0,0,0,144,1927,
        1,0,0,0,146,1929,1,0,0,0,148,1932,1,0,0,0,150,1935,1,0,0,0,152,1942,
        1,0,0,0,154,1949,1,0,0,0,156,1953,1,0,0,0,158,1967,1,0,0,0,160,1969,
        1,0,0,0,162,1971,1,0,0,0,164,1973,1,0,0,0,166,1977,1,0,0,0,168,1979,
        1,0,0,0,170,1981,1,0,0,0,172,1983,1,0,0,0,174,1985,1,0,0,0,176,1987,
        1,0,0,0,178,1989,1,0,0,0,180,1991,1,0,0,0,182,1993,1,0,0,0,184,1995,
        1,0,0,0,186,1997,1,0,0,0,188,1999,1,0,0,0,190,2001,1,0,0,0,192,2003,
        1,0,0,0,194,2005,1,0,0,0,196,2007,1,0,0,0,198,2009,1,0,0,0,200,2011,
        1,0,0,0,202,2013,1,0,0,0,204,2015,1,0,0,0,206,2017,1,0,0,0,208,2019,
        1,0,0,0,210,2021,1,0,0,0,212,2023,1,0,0,0,214,2025,1,0,0,0,216,2027,
        1,0,0,0,218,2029,1,0,0,0,220,2038,1,0,0,0,222,224,3,2,1,0,223,222,
        1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,
        1,0,0,0,227,225,1,0,0,0,228,229,5,0,0,1,229,1,1,0,0,0,230,232,5,
        1,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,
        0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,245,3,4,2,0,237,239,5,
        1,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,
        0,0,0,241,242,1,0,0,0,242,244,3,4,2,0,243,238,1,0,0,0,244,247,1,
        0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,245,1,
        0,0,0,248,250,5,1,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,
        0,0,0,251,252,1,0,0,0,252,3,1,0,0,0,253,251,1,0,0,0,254,257,5,71,
        0,0,255,256,5,114,0,0,256,258,5,111,0,0,257,255,1,0,0,0,257,258,
        1,0,0,0,258,260,1,0,0,0,259,254,1,0,0,0,259,260,1,0,0,0,260,285,
        1,0,0,0,261,286,3,6,3,0,262,286,3,8,4,0,263,286,3,10,5,0,264,286,
        3,12,6,0,265,286,3,14,7,0,266,286,3,22,11,0,267,286,3,26,13,0,268,
        286,3,42,21,0,269,286,3,44,22,0,270,286,3,46,23,0,271,286,3,56,28,
        0,272,286,3,58,29,0,273,286,3,60,30,0,274,286,3,62,31,0,275,286,
        3,70,35,0,276,286,3,74,37,0,277,286,3,78,39,0,278,286,3,20,10,0,
        279,286,3,16,8,0,280,286,3,18,9,0,281,286,3,80,40,0,282,286,3,102,
        51,0,283,286,3,106,53,0,284,286,3,110,55,0,285,261,1,0,0,0,285,262,
        1,0,0,0,285,263,1,0,0,0,285,264,1,0,0,0,285,265,1,0,0,0,285,266,
        1,0,0,0,285,267,1,0,0,0,285,268,1,0,0,0,285,269,1,0,0,0,285,270,
        1,0,0,0,285,271,1,0,0,0,285,272,1,0,0,0,285,273,1,0,0,0,285,274,
        1,0,0,0,285,275,1,0,0,0,285,276,1,0,0,0,285,277,1,0,0,0,285,278,
        1,0,0,0,285,279,1,0,0,0,285,280,1,0,0,0,285,281,1,0,0,0,285,282,
        1,0,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,5,1,0,0,0,287,288,5,
        30,0,0,288,292,5,131,0,0,289,290,3,176,88,0,290,291,5,2,0,0,291,
        293,1,0,0,0,292,289,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,
        312,3,178,89,0,295,305,5,121,0,0,296,297,5,135,0,0,297,306,3,182,
        91,0,298,300,5,46,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,
        0,0,0,301,302,3,184,92,0,302,303,5,135,0,0,303,304,3,184,92,0,304,
        306,1,0,0,0,305,296,1,0,0,0,305,299,1,0,0,0,306,313,1,0,0,0,307,
        309,5,27,0,0,308,310,5,46,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,
        311,1,0,0,0,311,313,3,28,14,0,312,295,1,0,0,0,312,307,1,0,0,0,313,
        7,1,0,0,0,314,322,5,31,0,0,315,323,3,176,88,0,316,317,3,176,88,0,
        317,318,5,2,0,0,318,320,1,0,0,0,319,316,1,0,0,0,319,320,1,0,0,0,
        320,321,1,0,0,0,321,323,3,180,90,0,322,315,1,0,0,0,322,319,1,0,0,
        0,322,323,1,0,0,0,323,9,1,0,0,0,324,326,5,35,0,0,325,327,5,55,0,
        0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,3,64,32,
        0,329,330,5,33,0,0,330,331,3,176,88,0,331,11,1,0,0,0,332,334,5,38,
        0,0,333,335,7,0,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,340,1,0,
        0,0,336,338,5,136,0,0,337,339,3,204,102,0,338,337,1,0,0,0,338,339,
        1,0,0,0,339,341,1,0,0,0,340,336,1,0,0,0,340,341,1,0,0,0,341,13,1,
        0,0,0,342,344,7,1,0,0,343,345,5,136,0,0,344,343,1,0,0,0,344,345,
        1,0,0,0,345,15,1,0,0,0,346,348,5,125,0,0,347,349,5,136,0,0,348,347,
        1,0,0,0,348,349,1,0,0,0,349,355,1,0,0,0,350,352,5,135,0,0,351,353,
        5,128,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,
        3,200,100,0,355,350,1,0,0,0,355,356,1,0,0,0,356,17,1,0,0,0,357,358,
        5,128,0,0,358,359,3,200,100,0,359,19,1,0,0,0,360,362,5,120,0,0,361,
        363,5,128,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,
        365,3,200,100,0,365,21,1,0,0,0,366,368,5,50,0,0,367,369,5,139,0,
        0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,374,5,84,0,
        0,371,372,5,80,0,0,372,373,5,102,0,0,373,375,5,70,0,0,374,371,1,
        0,0,0,374,375,1,0,0,0,375,379,1,0,0,0,376,377,3,176,88,0,377,378,
        5,2,0,0,378,380,1,0,0,0,379,376,1,0,0,0,379,380,1,0,0,0,380,381,
        1,0,0,0,381,382,3,190,95,0,382,383,5,107,0,0,383,384,3,178,89,0,
        384,385,5,3,0,0,385,390,3,24,12,0,386,387,5,5,0,0,387,389,3,24,12,
        0,388,386,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,
        0,391,393,1,0,0,0,392,390,1,0,0,0,393,396,5,4,0,0,394,395,5,147,
        0,0,395,397,3,64,32,0,396,394,1,0,0,0,396,397,1,0,0,0,397,23,1,0,
        0,0,398,401,3,184,92,0,399,401,3,64,32,0,400,398,1,0,0,0,400,399,
        1,0,0,0,401,404,1,0,0,0,402,403,5,45,0,0,403,405,3,186,93,0,404,
        402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,3,136,68,0,407,
        406,1,0,0,0,407,408,1,0,0,0,408,25,1,0,0,0,409,411,5,50,0,0,410,
        412,7,2,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,
        417,5,131,0,0,414,415,5,80,0,0,415,416,5,102,0,0,416,418,5,70,0,
        0,417,414,1,0,0,0,417,418,1,0,0,0,418,422,1,0,0,0,419,420,3,176,
        88,0,420,421,5,2,0,0,421,423,1,0,0,0,422,419,1,0,0,0,422,423,1,0,
        0,0,423,424,1,0,0,0,424,448,3,178,89,0,425,426,5,3,0,0,426,431,3,
        28,14,0,427,428,5,5,0,0,428,430,3,28,14,0,429,427,1,0,0,0,430,433,
        1,0,0,0,431,432,1,0,0,0,431,429,1,0,0,0,432,438,1,0,0,0,433,431,
        1,0,0,0,434,435,5,5,0,0,435,437,3,36,18,0,436,434,1,0,0,0,437,440,
        1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,438,
        1,0,0,0,441,444,5,4,0,0,442,443,5,149,0,0,443,445,5,184,0,0,444,
        442,1,0,0,0,444,445,1,0,0,0,445,449,1,0,0,0,446,447,5,33,0,0,447,
        449,3,80,40,0,448,425,1,0,0,0,448,446,1,0,0,0,449,27,1,0,0,0,450,
        452,3,184,92,0,451,453,3,30,15,0,452,451,1,0,0,0,452,453,1,0,0,0,
        453,457,1,0,0,0,454,456,3,32,16,0,455,454,1,0,0,0,456,459,1,0,0,
        0,457,455,1,0,0,0,457,458,1,0,0,0,458,29,1,0,0,0,459,457,1,0,0,0,
        460,462,3,172,86,0,461,460,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,
        0,463,461,1,0,0,0,464,475,1,0,0,0,465,466,5,3,0,0,466,467,3,34,17,
        0,467,468,5,4,0,0,468,476,1,0,0,0,469,470,5,3,0,0,470,471,3,34,17,
        0,471,472,5,5,0,0,472,473,3,34,17,0,473,474,5,4,0,0,474,476,1,0,
        0,0,475,465,1,0,0,0,475,469,1,0,0,0,475,476,1,0,0,0,476,31,1,0,0,
        0,477,478,5,49,0,0,478,480,3,172,86,0,479,477,1,0,0,0,479,480,1,
        0,0,0,480,528,1,0,0,0,481,482,5,113,0,0,482,484,5,95,0,0,483,485,
        3,136,68,0,484,483,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,488,
        3,40,20,0,487,486,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,491,
        5,36,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,529,1,0,0,0,492,493,
        5,102,0,0,493,496,5,104,0,0,494,496,5,139,0,0,495,492,1,0,0,0,495,
        494,1,0,0,0,496,498,1,0,0,0,497,499,3,40,20,0,498,497,1,0,0,0,498,
        499,1,0,0,0,499,529,1,0,0,0,500,501,5,44,0,0,501,502,5,3,0,0,502,
        503,3,64,32,0,503,504,5,4,0,0,504,529,1,0,0,0,505,512,5,56,0,0,506,
        513,3,34,17,0,507,513,3,68,34,0,508,509,5,3,0,0,509,510,3,64,32,
        0,510,511,5,4,0,0,511,513,1,0,0,0,512,506,1,0,0,0,512,507,1,0,0,
        0,512,508,1,0,0,0,513,529,1,0,0,0,514,515,5,45,0,0,515,529,3,186,
        93,0,516,529,3,38,19,0,517,518,5,168,0,0,518,520,5,169,0,0,519,517,
        1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,5,33,0,0,522,523,
        5,3,0,0,523,524,3,64,32,0,524,526,5,4,0,0,525,527,7,3,0,0,526,525,
        1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,481,1,0,0,0,528,495,
        1,0,0,0,528,500,1,0,0,0,528,505,1,0,0,0,528,514,1,0,0,0,528,516,
        1,0,0,0,528,519,1,0,0,0,529,33,1,0,0,0,530,532,7,4,0,0,531,530,1,
        0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,534,5,185,0,0,534,35,1,
        0,0,0,535,536,5,49,0,0,536,538,3,172,86,0,537,535,1,0,0,0,537,538,
        1,0,0,0,538,576,1,0,0,0,539,540,5,113,0,0,540,543,5,95,0,0,541,543,
        5,139,0,0,542,539,1,0,0,0,542,541,1,0,0,0,543,544,1,0,0,0,544,545,
        5,3,0,0,545,550,3,24,12,0,546,547,5,5,0,0,547,549,3,24,12,0,548,
        546,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,
        553,1,0,0,0,552,550,1,0,0,0,553,555,5,4,0,0,554,556,3,40,20,0,555,
        554,1,0,0,0,555,556,1,0,0,0,556,577,1,0,0,0,557,558,5,44,0,0,558,
        559,5,3,0,0,559,560,3,64,32,0,560,561,5,4,0,0,561,577,1,0,0,0,562,
        563,5,74,0,0,563,564,5,95,0,0,564,565,5,3,0,0,565,570,3,184,92,0,
        566,567,5,5,0,0,567,569,3,184,92,0,568,566,1,0,0,0,569,572,1,0,0,
        0,570,568,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,
        0,573,574,5,4,0,0,574,575,3,38,19,0,575,577,1,0,0,0,576,542,1,0,
        0,0,576,557,1,0,0,0,576,562,1,0,0,0,577,37,1,0,0,0,578,579,5,117,
        0,0,579,591,3,188,94,0,580,581,5,3,0,0,581,586,3,184,92,0,582,583,
        5,5,0,0,583,585,3,184,92,0,584,582,1,0,0,0,585,588,1,0,0,0,586,584,
        1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,590,
        5,4,0,0,590,592,1,0,0,0,591,580,1,0,0,0,591,592,1,0,0,0,592,607,
        1,0,0,0,593,594,5,107,0,0,594,601,7,5,0,0,595,596,5,130,0,0,596,
        602,7,6,0,0,597,602,5,41,0,0,598,602,5,123,0,0,599,600,5,101,0,0,
        600,602,5,26,0,0,601,595,1,0,0,0,601,597,1,0,0,0,601,598,1,0,0,0,
        601,599,1,0,0,0,602,606,1,0,0,0,603,604,5,99,0,0,604,606,3,172,86,
        0,605,593,1,0,0,0,605,603,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,
        0,607,608,1,0,0,0,608,618,1,0,0,0,609,607,1,0,0,0,610,612,5,102,
        0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,616,5,57,
        0,0,614,615,5,86,0,0,615,617,7,7,0,0,616,614,1,0,0,0,616,617,1,0,
        0,0,617,619,1,0,0,0,618,611,1,0,0,0,618,619,1,0,0,0,619,39,1,0,0,
        0,620,621,5,107,0,0,621,622,5,48,0,0,622,623,7,8,0,0,623,41,1,0,
        0,0,624,626,5,50,0,0,625,627,7,2,0,0,626,625,1,0,0,0,626,627,1,0,
        0,0,627,628,1,0,0,0,628,632,5,137,0,0,629,630,5,80,0,0,630,631,5,
        102,0,0,631,633,5,70,0,0,632,629,1,0,0,0,632,633,1,0,0,0,633,637,
        1,0,0,0,634,635,3,176,88,0,635,636,5,2,0,0,636,638,1,0,0,0,637,634,
        1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,644,3,192,96,0,640,645,
        5,37,0,0,641,645,5,28,0,0,642,643,5,89,0,0,643,645,5,105,0,0,644,
        640,1,0,0,0,644,641,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,
        660,1,0,0,0,646,661,5,59,0,0,647,661,5,88,0,0,648,658,5,140,0,0,
        649,650,5,105,0,0,650,655,3,184,92,0,651,652,5,5,0,0,652,654,3,184,
        92,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,
        0,0,656,659,1,0,0,0,657,655,1,0,0,0,658,649,1,0,0,0,658,659,1,0,
        0,0,659,661,1,0,0,0,660,646,1,0,0,0,660,647,1,0,0,0,660,648,1,0,
        0,0,661,662,1,0,0,0,662,663,5,107,0,0,663,667,3,178,89,0,664,665,
        5,73,0,0,665,666,5,64,0,0,666,668,5,126,0,0,667,664,1,0,0,0,667,
        668,1,0,0,0,668,671,1,0,0,0,669,670,5,146,0,0,670,672,3,64,32,0,
        671,669,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,682,5,38,0,0,
        674,679,3,102,51,0,675,679,3,70,35,0,676,679,3,56,28,0,677,679,3,
        80,40,0,678,674,1,0,0,0,678,675,1,0,0,0,678,676,1,0,0,0,678,677,
        1,0,0,0,679,680,1,0,0,0,680,681,5,1,0,0,681,683,1,0,0,0,682,678,
        1,0,0,0,683,684,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,686,
        1,0,0,0,686,687,5,66,0,0,687,43,1,0,0,0,688,690,5,50,0,0,689,691,
        7,2,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,696,
        5,144,0,0,693,694,5,80,0,0,694,695,5,102,0,0,695,697,5,70,0,0,696,
        693,1,0,0,0,696,697,1,0,0,0,697,701,1,0,0,0,698,699,3,176,88,0,699,
        700,5,2,0,0,700,702,1,0,0,0,701,698,1,0,0,0,701,702,1,0,0,0,702,
        703,1,0,0,0,703,715,3,194,97,0,704,705,5,3,0,0,705,710,3,184,92,
        0,706,707,5,5,0,0,707,709,3,184,92,0,708,706,1,0,0,0,709,712,1,0,
        0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,710,1,0,
        0,0,713,714,5,4,0,0,714,716,1,0,0,0,715,704,1,0,0,0,715,716,1,0,
        0,0,716,717,1,0,0,0,717,718,5,33,0,0,718,719,3,80,40,0,719,45,1,
        0,0,0,720,721,5,50,0,0,721,722,5,145,0,0,722,726,5,131,0,0,723,724,
        5,80,0,0,724,725,5,102,0,0,725,727,5,70,0,0,726,723,1,0,0,0,726,
        727,1,0,0,0,727,731,1,0,0,0,728,729,3,176,88,0,729,730,5,2,0,0,730,
        732,1,0,0,0,731,728,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
        734,3,178,89,0,734,735,5,141,0,0,735,747,3,196,98,0,736,737,5,3,
        0,0,737,742,3,166,83,0,738,739,5,5,0,0,739,741,3,166,83,0,740,738,
        1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,
        1,0,0,0,744,742,1,0,0,0,745,746,5,4,0,0,746,748,1,0,0,0,747,736,
        1,0,0,0,747,748,1,0,0,0,748,47,1,0,0,0,749,751,5,148,0,0,750,752,
        5,116,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,
        3,50,25,0,754,755,5,33,0,0,755,756,5,3,0,0,756,757,3,80,40,0,757,
        767,5,4,0,0,758,759,5,5,0,0,759,760,3,50,25,0,760,761,5,33,0,0,761,
        762,5,3,0,0,762,763,3,80,40,0,763,764,5,4,0,0,764,766,1,0,0,0,765,
        758,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,
        49,1,0,0,0,769,767,1,0,0,0,770,782,3,178,89,0,771,772,5,3,0,0,772,
        777,3,184,92,0,773,774,5,5,0,0,774,776,3,184,92,0,775,773,1,0,0,
        0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,
        0,779,777,1,0,0,0,780,781,5,4,0,0,781,783,1,0,0,0,782,771,1,0,0,
        0,782,783,1,0,0,0,783,51,1,0,0,0,784,785,3,50,25,0,785,786,5,33,
        0,0,786,787,5,3,0,0,787,788,3,158,79,0,788,790,5,138,0,0,789,791,
        5,29,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,
        3,160,80,0,793,794,5,4,0,0,794,53,1,0,0,0,795,807,3,178,89,0,796,
        797,5,3,0,0,797,802,3,184,92,0,798,799,5,5,0,0,799,801,3,184,92,
        0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,
        0,803,805,1,0,0,0,804,802,1,0,0,0,805,806,5,4,0,0,806,808,1,0,0,
        0,807,796,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,5,33,0,
        0,810,811,5,3,0,0,811,812,3,80,40,0,812,813,5,4,0,0,813,55,1,0,0,
        0,814,816,3,48,24,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,
        0,0,817,818,5,59,0,0,818,819,5,75,0,0,819,822,3,108,54,0,820,821,
        5,147,0,0,821,823,3,64,32,0,822,820,1,0,0,0,822,823,1,0,0,0,823,
        57,1,0,0,0,824,826,3,48,24,0,825,824,1,0,0,0,825,826,1,0,0,0,826,
        827,1,0,0,0,827,828,5,59,0,0,828,829,5,75,0,0,829,832,3,108,54,0,
        830,831,5,147,0,0,831,833,3,64,32,0,832,830,1,0,0,0,832,833,1,0,
        0,0,833,838,1,0,0,0,834,836,3,130,65,0,835,834,1,0,0,0,835,836,1,
        0,0,0,836,837,1,0,0,0,837,839,3,132,66,0,838,835,1,0,0,0,838,839,
        1,0,0,0,839,59,1,0,0,0,840,842,5,61,0,0,841,843,5,55,0,0,842,841,
        1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,3,176,88,0,845,61,
        1,0,0,0,846,847,5,63,0,0,847,850,7,9,0,0,848,849,5,80,0,0,849,851,
        5,70,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,855,1,0,0,0,852,853,
        3,176,88,0,853,854,5,2,0,0,854,856,1,0,0,0,855,852,1,0,0,0,855,856,
        1,0,0,0,856,857,1,0,0,0,857,858,3,220,110,0,858,63,1,0,0,0,859,860,
        6,32,-1,0,860,948,3,68,34,0,861,948,5,186,0,0,862,863,3,176,88,0,
        863,864,5,2,0,0,864,866,1,0,0,0,865,862,1,0,0,0,865,866,1,0,0,0,
        866,867,1,0,0,0,867,868,3,178,89,0,868,869,5,2,0,0,869,871,1,0,0,
        0,870,865,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,948,3,184,
        92,0,873,874,3,162,81,0,874,875,3,64,32,21,875,948,1,0,0,0,876,877,
        3,174,87,0,877,890,5,3,0,0,878,880,5,62,0,0,879,878,1,0,0,0,879,
        880,1,0,0,0,880,881,1,0,0,0,881,886,3,64,32,0,882,883,5,5,0,0,883,
        885,3,64,32,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,
        887,1,0,0,0,887,891,1,0,0,0,888,886,1,0,0,0,889,891,5,7,0,0,890,
        879,1,0,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,
        894,5,4,0,0,893,895,3,112,56,0,894,893,1,0,0,0,894,895,1,0,0,0,895,
        897,1,0,0,0,896,898,3,116,58,0,897,896,1,0,0,0,897,898,1,0,0,0,898,
        948,1,0,0,0,899,900,5,3,0,0,900,905,3,64,32,0,901,902,5,5,0,0,902,
        904,3,64,32,0,903,901,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,
        906,1,0,0,0,906,908,1,0,0,0,907,905,1,0,0,0,908,909,5,4,0,0,909,
        948,1,0,0,0,910,911,5,43,0,0,911,912,5,3,0,0,912,913,3,64,32,0,913,
        914,5,33,0,0,914,915,3,30,15,0,915,916,5,4,0,0,916,948,1,0,0,0,917,
        919,5,102,0,0,918,917,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,
        922,5,70,0,0,921,918,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,
        924,5,3,0,0,924,925,3,80,40,0,925,926,5,4,0,0,926,948,1,0,0,0,927,
        929,5,42,0,0,928,930,3,64,32,0,929,928,1,0,0,0,929,930,1,0,0,0,930,
        936,1,0,0,0,931,932,5,146,0,0,932,933,3,64,32,0,933,934,5,134,0,
        0,934,935,3,64,32,0,935,937,1,0,0,0,936,931,1,0,0,0,937,938,1,0,
        0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,942,1,0,0,0,940,941,5,65,
        0,0,941,943,3,64,32,0,942,940,1,0,0,0,942,943,1,0,0,0,943,944,1,
        0,0,0,944,945,5,66,0,0,945,948,1,0,0,0,946,948,3,66,33,0,947,859,
        1,0,0,0,947,861,1,0,0,0,947,870,1,0,0,0,947,873,1,0,0,0,947,876,
        1,0,0,0,947,899,1,0,0,0,947,910,1,0,0,0,947,921,1,0,0,0,947,927,
        1,0,0,0,947,946,1,0,0,0,948,1068,1,0,0,0,949,950,10,20,0,0,950,951,
        5,11,0,0,951,1067,3,64,32,21,952,953,10,19,0,0,953,954,7,10,0,0,
        954,1067,3,64,32,20,955,956,10,18,0,0,956,957,7,4,0,0,957,1067,3,
        64,32,19,958,959,10,17,0,0,959,960,7,11,0,0,960,1067,3,64,32,18,
        961,962,10,16,0,0,962,963,7,12,0,0,963,1067,3,64,32,17,964,977,10,
        15,0,0,965,978,5,6,0,0,966,978,5,22,0,0,967,978,5,23,0,0,968,978,
        5,24,0,0,969,978,5,92,0,0,970,971,5,92,0,0,971,978,5,102,0,0,972,
        978,5,83,0,0,973,978,5,97,0,0,974,978,5,77,0,0,975,978,5,99,0,0,
        976,978,5,118,0,0,977,965,1,0,0,0,977,966,1,0,0,0,977,967,1,0,0,
        0,977,968,1,0,0,0,977,969,1,0,0,0,977,970,1,0,0,0,977,972,1,0,0,
        0,977,973,1,0,0,0,977,974,1,0,0,0,977,975,1,0,0,0,977,976,1,0,0,
        0,978,979,1,0,0,0,979,1067,3,64,32,16,980,981,10,14,0,0,981,982,
        5,32,0,0,982,1067,3,64,32,15,983,984,10,13,0,0,984,985,5,108,0,0,
        985,1067,3,64,32,14,986,987,10,6,0,0,987,989,5,92,0,0,988,990,5,
        102,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,1,0,0,0,991,1067,
        3,64,32,7,992,994,10,5,0,0,993,995,5,102,0,0,994,993,1,0,0,0,994,
        995,1,0,0,0,995,996,1,0,0,0,996,997,5,39,0,0,997,998,3,64,32,0,998,
        999,5,32,0,0,999,1000,3,64,32,6,1000,1067,1,0,0,0,1001,1002,10,9,
        0,0,1002,1003,5,45,0,0,1003,1067,3,186,93,0,1004,1006,10,8,0,0,1005,
        1007,5,102,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,
        0,0,1008,1009,7,13,0,0,1009,1012,3,64,32,0,1010,1011,5,67,0,0,1011,
        1013,3,64,32,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1067,1,0,
        0,0,1014,1019,10,7,0,0,1015,1020,5,93,0,0,1016,1020,5,103,0,0,1017,
        1018,5,102,0,0,1018,1020,5,104,0,0,1019,1015,1,0,0,0,1019,1016,1,
        0,0,0,1019,1017,1,0,0,0,1020,1067,1,0,0,0,1021,1023,10,4,0,0,1022,
        1024,5,102,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,
        0,0,1025,1064,5,83,0,0,1026,1036,5,3,0,0,1027,1037,3,80,40,0,1028,
        1033,3,64,32,0,1029,1030,5,5,0,0,1030,1032,3,64,32,0,1031,1029,1,
        0,0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,
        1037,1,0,0,0,1035,1033,1,0,0,0,1036,1027,1,0,0,0,1036,1028,1,0,0,
        0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1065,5,4,0,0,1039,1040,
        3,176,88,0,1040,1041,5,2,0,0,1041,1043,1,0,0,0,1042,1039,1,0,0,0,
        1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1065,3,178,89,0,1045,1046,
        3,176,88,0,1046,1047,5,2,0,0,1047,1049,1,0,0,0,1048,1045,1,0,0,0,
        1048,1049,1,0,0,0,1049,1050,1,0,0,0,1050,1051,3,218,109,0,1051,1060,
        5,3,0,0,1052,1057,3,64,32,0,1053,1054,5,5,0,0,1054,1056,3,64,32,
        0,1055,1053,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,
        1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1060,1052,1,0,0,0,1060,
        1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,4,0,0,1063,1065,1,0,0,
        0,1064,1026,1,0,0,0,1064,1042,1,0,0,0,1064,1048,1,0,0,0,1065,1067,
        1,0,0,0,1066,949,1,0,0,0,1066,952,1,0,0,0,1066,955,1,0,0,0,1066,
        958,1,0,0,0,1066,961,1,0,0,0,1066,964,1,0,0,0,1066,980,1,0,0,0,1066,
        983,1,0,0,0,1066,986,1,0,0,0,1066,992,1,0,0,0,1066,1001,1,0,0,0,
        1066,1004,1,0,0,0,1066,1014,1,0,0,0,1066,1021,1,0,0,0,1067,1070,
        1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,65,1,0,0,0,1070,
        1068,1,0,0,0,1071,1072,5,115,0,0,1072,1077,5,3,0,0,1073,1078,5,81,
        0,0,1074,1075,7,14,0,0,1075,1076,5,5,0,0,1076,1078,3,164,82,0,1077,
        1073,1,0,0,0,1077,1074,1,0,0,0,1078,1079,1,0,0,0,1079,1080,5,4,0,
        0,1080,67,1,0,0,0,1081,1082,7,15,0,0,1082,69,1,0,0,0,1083,1085,3,
        48,24,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,1091,1,0,0,0,1086,
        1092,5,88,0,0,1087,1092,5,122,0,0,1088,1089,5,88,0,0,1089,1090,5,
        108,0,0,1090,1092,7,8,0,0,1091,1086,1,0,0,0,1091,1087,1,0,0,0,1091,
        1088,1,0,0,0,1092,1093,1,0,0,0,1093,1097,5,91,0,0,1094,1095,3,176,
        88,0,1095,1096,5,2,0,0,1096,1098,1,0,0,0,1097,1094,1,0,0,0,1097,
        1098,1,0,0,0,1098,1099,1,0,0,0,1099,1102,3,178,89,0,1100,1101,5,
        33,0,0,1101,1103,3,202,101,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,
        1103,1115,1,0,0,0,1104,1105,5,3,0,0,1105,1110,3,184,92,0,1106,1107,
        5,5,0,0,1107,1109,3,184,92,0,1108,1106,1,0,0,0,1109,1112,1,0,0,0,
        1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,1110,
        1,0,0,0,1113,1114,5,4,0,0,1114,1116,1,0,0,0,1115,1104,1,0,0,0,1115,
        1116,1,0,0,0,1116,1146,1,0,0,0,1117,1118,5,143,0,0,1118,1119,5,3,
        0,0,1119,1124,3,64,32,0,1120,1121,5,5,0,0,1121,1123,3,64,32,0,1122,
        1120,1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,
        0,1125,1127,1,0,0,0,1126,1124,1,0,0,0,1127,1142,5,4,0,0,1128,1129,
        5,5,0,0,1129,1130,5,3,0,0,1130,1135,3,64,32,0,1131,1132,5,5,0,0,
        1132,1134,3,64,32,0,1133,1131,1,0,0,0,1134,1137,1,0,0,0,1135,1133,
        1,0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,0,1137,1135,1,0,0,0,1138,
        1139,5,4,0,0,1139,1141,1,0,0,0,1140,1128,1,0,0,0,1141,1144,1,0,0,
        0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,1147,1,0,0,0,1144,1142,
        1,0,0,0,1145,1147,3,80,40,0,1146,1117,1,0,0,0,1146,1145,1,0,0,0,
        1147,1149,1,0,0,0,1148,1150,3,72,36,0,1149,1148,1,0,0,0,1149,1150,
        1,0,0,0,1150,1154,1,0,0,0,1151,1152,5,56,0,0,1152,1154,5,143,0,0,
        1153,1084,1,0,0,0,1153,1151,1,0,0,0,1154,71,1,0,0,0,1155,1156,5,
        107,0,0,1156,1171,5,48,0,0,1157,1158,5,3,0,0,1158,1163,3,24,12,0,
        1159,1160,5,5,0,0,1160,1162,3,24,12,0,1161,1159,1,0,0,0,1162,1165,
        1,0,0,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1166,1,0,0,0,1165,
        1163,1,0,0,0,1166,1169,5,4,0,0,1167,1168,5,147,0,0,1168,1170,3,64,
        32,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,
        1157,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1200,5,182,
        0,0,1174,1201,5,183,0,0,1175,1176,5,140,0,0,1176,1179,5,130,0,0,
        1177,1180,3,184,92,0,1178,1180,3,104,52,0,1179,1177,1,0,0,0,1179,
        1178,1,0,0,0,1180,1181,1,0,0,0,1181,1182,5,22,0,0,1182,1193,3,64,
        32,0,1183,1186,5,5,0,0,1184,1187,3,184,92,0,1185,1187,3,104,52,0,
        1186,1184,1,0,0,0,1186,1185,1,0,0,0,1187,1188,1,0,0,0,1188,1189,
        5,22,0,0,1189,1190,3,64,32,0,1190,1192,1,0,0,0,1191,1183,1,0,0,0,
        1192,1195,1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,1198,
        1,0,0,0,1195,1193,1,0,0,0,1196,1197,5,147,0,0,1197,1199,3,64,32,
        0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,1201,1,0,0,0,1200,1174,
        1,0,0,0,1200,1175,1,0,0,0,1201,73,1,0,0,0,1202,1206,5,112,0,0,1203,
        1204,3,176,88,0,1204,1205,5,2,0,0,1205,1207,1,0,0,0,1206,1203,1,
        0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1215,3,198,99,0,1209,
        1210,5,6,0,0,1210,1216,3,76,38,0,1211,1212,5,3,0,0,1212,1213,3,76,
        38,0,1213,1214,5,4,0,0,1214,1216,1,0,0,0,1215,1209,1,0,0,0,1215,
        1211,1,0,0,0,1215,1216,1,0,0,0,1216,75,1,0,0,0,1217,1221,3,34,17,
        0,1218,1221,3,172,86,0,1219,1221,5,187,0,0,1220,1217,1,0,0,0,1220,
        1218,1,0,0,0,1220,1219,1,0,0,0,1221,77,1,0,0,0,1222,1233,5,119,0,
        0,1223,1234,3,186,93,0,1224,1225,3,176,88,0,1225,1226,5,2,0,0,1226,
        1228,1,0,0,0,1227,1224,1,0,0,0,1227,1228,1,0,0,0,1228,1231,1,0,0,
        0,1229,1232,3,178,89,0,1230,1232,3,190,95,0,1231,1229,1,0,0,0,1231,
        1230,1,0,0,0,1232,1234,1,0,0,0,1233,1223,1,0,0,0,1233,1227,1,0,0,
        0,1233,1234,1,0,0,0,1234,79,1,0,0,0,1235,1237,3,128,64,0,1236,1235,
        1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1244,3,84,42,0,
        1239,1240,3,100,50,0,1240,1241,3,84,42,0,1241,1243,1,0,0,0,1242,
        1239,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,
        0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1247,1249,3,130,65,0,1248,
        1247,1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,3,132,
        66,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,81,1,0,0,0,1253,1261,
        3,92,46,0,1254,1255,3,96,48,0,1255,1257,3,92,46,0,1256,1258,3,98,
        49,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1260,1,0,0,0,1259,
        1254,1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1261,1262,1,0,0,
        0,1262,83,1,0,0,0,1263,1261,1,0,0,0,1264,1266,5,129,0,0,1265,1267,
        7,16,0,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,
        1273,3,94,47,0,1269,1270,5,5,0,0,1270,1272,3,94,47,0,1271,1269,1,
        0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,
        1288,1,0,0,0,1275,1273,1,0,0,0,1276,1286,5,75,0,0,1277,1282,3,92,
        46,0,1278,1279,5,5,0,0,1279,1281,3,92,46,0,1280,1278,1,0,0,0,1281,
        1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1287,1,0,0,
        0,1284,1282,1,0,0,0,1285,1287,3,82,41,0,1286,1277,1,0,0,0,1286,1285,
        1,0,0,0,1287,1289,1,0,0,0,1288,1276,1,0,0,0,1288,1289,1,0,0,0,1289,
        1292,1,0,0,0,1290,1291,5,147,0,0,1291,1293,3,64,32,0,1292,1290,1,
        0,0,0,1292,1293,1,0,0,0,1293,1308,1,0,0,0,1294,1295,5,78,0,0,1295,
        1296,5,40,0,0,1296,1301,3,64,32,0,1297,1298,5,5,0,0,1298,1300,3,
        64,32,0,1299,1297,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1301,
        1302,1,0,0,0,1302,1306,1,0,0,0,1303,1301,1,0,0,0,1304,1305,5,79,
        0,0,1305,1307,3,64,32,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,
        1309,1,0,0,0,1308,1294,1,0,0,0,1308,1309,1,0,0,0,1309,1324,1,0,0,
        0,1310,1311,5,173,0,0,1311,1312,3,206,103,0,1312,1313,5,33,0,0,1313,
        1321,3,114,57,0,1314,1315,5,5,0,0,1315,1316,3,206,103,0,1316,1317,
        5,33,0,0,1317,1318,3,114,57,0,1318,1320,1,0,0,0,1319,1314,1,0,0,
        0,1320,1323,1,0,0,0,1321,1319,1,0,0,0,1321,1322,1,0,0,0,1322,1325,
        1,0,0,0,1323,1321,1,0,0,0,1324,1310,1,0,0,0,1324,1325,1,0,0,0,1325,
        1355,1,0,0,0,1326,1327,5,143,0,0,1327,1328,5,3,0,0,1328,1333,3,64,
        32,0,1329,1330,5,5,0,0,1330,1332,3,64,32,0,1331,1329,1,0,0,0,1332,
        1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,
        0,1335,1333,1,0,0,0,1336,1351,5,4,0,0,1337,1338,5,5,0,0,1338,1339,
        5,3,0,0,1339,1344,3,64,32,0,1340,1341,5,5,0,0,1341,1343,3,64,32,
        0,1342,1340,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,
        1,0,0,0,1345,1347,1,0,0,0,1346,1344,1,0,0,0,1347,1348,5,4,0,0,1348,
        1350,1,0,0,0,1349,1337,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,
        0,1351,1352,1,0,0,0,1352,1355,1,0,0,0,1353,1351,1,0,0,0,1354,1264,
        1,0,0,0,1354,1326,1,0,0,0,1355,85,1,0,0,0,1356,1357,3,80,40,0,1357,
        87,1,0,0,0,1358,1360,3,128,64,0,1359,1358,1,0,0,0,1359,1360,1,0,
        0,0,1360,1361,1,0,0,0,1361,1363,3,84,42,0,1362,1364,3,130,65,0,1363,
        1362,1,0,0,0,1363,1364,1,0,0,0,1364,1366,1,0,0,0,1365,1367,3,132,
        66,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,89,1,0,0,0,1368,1370,
        3,128,64,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,0,
        1371,1381,3,84,42,0,1372,1374,5,138,0,0,1373,1375,5,29,0,0,1374,
        1373,1,0,0,0,1374,1375,1,0,0,0,1375,1379,1,0,0,0,1376,1379,5,90,
        0,0,1377,1379,5,68,0,0,1378,1372,1,0,0,0,1378,1376,1,0,0,0,1378,
        1377,1,0,0,0,1379,1380,1,0,0,0,1380,1382,3,84,42,0,1381,1378,1,0,
        0,0,1382,1383,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,0,0,0,1384,1386,
        1,0,0,0,1385,1387,3,130,65,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,
        1387,1389,1,0,0,0,1388,1390,3,132,66,0,1389,1388,1,0,0,0,1389,1390,
        1,0,0,0,1390,91,1,0,0,0,1391,1392,3,176,88,0,1392,1393,5,2,0,0,1393,
        1395,1,0,0,0,1394,1391,1,0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,0,
        0,1396,1401,3,178,89,0,1397,1399,5,33,0,0,1398,1397,1,0,0,0,1398,
        1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,3,202,101,0,1401,1398,1,
        0,0,0,1401,1402,1,0,0,0,1402,1408,1,0,0,0,1403,1404,5,85,0,0,1404,
        1405,5,40,0,0,1405,1409,3,190,95,0,1406,1407,5,102,0,0,1407,1409,
        5,85,0,0,1408,1403,1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,
        1456,1,0,0,0,1410,1411,3,176,88,0,1411,1412,5,2,0,0,1412,1414,1,
        0,0,0,1413,1410,1,0,0,0,1413,1414,1,0,0,0,1414,1415,1,0,0,0,1415,
        1416,3,218,109,0,1416,1417,5,3,0,0,1417,1422,3,64,32,0,1418,1419,
        5,5,0,0,1419,1421,3,64,32,0,1420,1418,1,0,0,0,1421,1424,1,0,0,0,
        1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1422,
        1,0,0,0,1425,1430,5,4,0,0,1426,1428,5,33,0,0,1427,1426,1,0,0,0,1427,
        1428,1,0,0,0,1428,1429,1,0,0,0,1429,1431,3,202,101,0,1430,1427,1,
        0,0,0,1430,1431,1,0,0,0,1431,1456,1,0,0,0,1432,1442,5,3,0,0,1433,
        1438,3,92,46,0,1434,1435,5,5,0,0,1435,1437,3,92,46,0,1436,1434,1,
        0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,
        1443,1,0,0,0,1440,1438,1,0,0,0,1441,1443,3,82,41,0,1442,1433,1,0,
        0,0,1442,1441,1,0,0,0,1443,1444,1,0,0,0,1444,1445,5,4,0,0,1445,1456,
        1,0,0,0,1446,1447,5,3,0,0,1447,1448,3,80,40,0,1448,1453,5,4,0,0,
        1449,1451,5,33,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,
        1,0,0,0,1452,1454,3,202,101,0,1453,1450,1,0,0,0,1453,1454,1,0,0,
        0,1454,1456,1,0,0,0,1455,1394,1,0,0,0,1455,1413,1,0,0,0,1455,1432,
        1,0,0,0,1455,1446,1,0,0,0,1456,93,1,0,0,0,1457,1470,5,7,0,0,1458,
        1459,3,178,89,0,1459,1460,5,2,0,0,1460,1461,5,7,0,0,1461,1470,1,
        0,0,0,1462,1467,3,64,32,0,1463,1465,5,33,0,0,1464,1463,1,0,0,0,1464,
        1465,1,0,0,0,1465,1466,1,0,0,0,1466,1468,3,168,84,0,1467,1464,1,
        0,0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1457,1,0,0,0,1469,
        1458,1,0,0,0,1469,1462,1,0,0,0,1470,95,1,0,0,0,1471,1485,5,5,0,0,
        1472,1474,5,100,0,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1481,
        1,0,0,0,1475,1477,5,96,0,0,1476,1478,5,110,0,0,1477,1476,1,0,0,0,
        1477,1478,1,0,0,0,1478,1482,1,0,0,0,1479,1482,5,87,0,0,1480,1482,
        5,51,0,0,1481,1475,1,0,0,0,1481,1479,1,0,0,0,1481,1480,1,0,0,0,1481,
        1482,1,0,0,0,1482,1483,1,0,0,0,1483,1485,5,94,0,0,1484,1471,1,0,
        0,0,1484,1473,1,0,0,0,1485,97,1,0,0,0,1486,1487,5,107,0,0,1487,1501,
        3,64,32,0,1488,1489,5,141,0,0,1489,1490,5,3,0,0,1490,1495,3,184,
        92,0,1491,1492,5,5,0,0,1492,1494,3,184,92,0,1493,1491,1,0,0,0,1494,
        1497,1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,
        0,1497,1495,1,0,0,0,1498,1499,5,4,0,0,1499,1501,1,0,0,0,1500,1486,
        1,0,0,0,1500,1488,1,0,0,0,1501,99,1,0,0,0,1502,1504,5,138,0,0,1503,
        1505,5,29,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1509,1,0,
        0,0,1506,1509,5,90,0,0,1507,1509,5,68,0,0,1508,1502,1,0,0,0,1508,
        1506,1,0,0,0,1508,1507,1,0,0,0,1509,101,1,0,0,0,1510,1512,3,48,24,
        0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1516,
        5,140,0,0,1514,1515,5,108,0,0,1515,1517,7,8,0,0,1516,1514,1,0,0,
        0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1519,3,108,54,0,1519,
        1522,5,130,0,0,1520,1523,3,184,92,0,1521,1523,3,104,52,0,1522,1520,
        1,0,0,0,1522,1521,1,0,0,0,1523,1524,1,0,0,0,1524,1525,5,6,0,0,1525,
        1536,3,64,32,0,1526,1529,5,5,0,0,1527,1530,3,184,92,0,1528,1530,
        3,104,52,0,1529,1527,1,0,0,0,1529,1528,1,0,0,0,1530,1531,1,0,0,0,
        1531,1532,5,6,0,0,1532,1533,3,64,32,0,1533,1535,1,0,0,0,1534,1526,
        1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1536,1537,1,0,0,0,1537,
        1541,1,0,0,0,1538,1536,1,0,0,0,1539,1540,5,147,0,0,1540,1542,3,64,
        32,0,1541,1539,1,0,0,0,1541,1542,1,0,0,0,1542,103,1,0,0,0,1543,1544,
        5,3,0,0,1544,1549,3,184,92,0,1545,1546,5,5,0,0,1546,1548,3,184,92,
        0,1547,1545,1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,
        1,0,0,0,1550,1552,1,0,0,0,1551,1549,1,0,0,0,1552,1553,5,4,0,0,1553,
        105,1,0,0,0,1554,1556,3,48,24,0,1555,1554,1,0,0,0,1555,1556,1,0,
        0,0,1556,1557,1,0,0,0,1557,1560,5,140,0,0,1558,1559,5,108,0,0,1559,
        1561,7,8,0,0,1560,1558,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,
        0,1562,1563,3,108,54,0,1563,1566,5,130,0,0,1564,1567,3,184,92,0,
        1565,1567,3,104,52,0,1566,1564,1,0,0,0,1566,1565,1,0,0,0,1567,1568,
        1,0,0,0,1568,1569,5,6,0,0,1569,1580,3,64,32,0,1570,1573,5,5,0,0,
        1571,1574,3,184,92,0,1572,1574,3,104,52,0,1573,1571,1,0,0,0,1573,
        1572,1,0,0,0,1574,1575,1,0,0,0,1575,1576,5,6,0,0,1576,1577,3,64,
        32,0,1577,1579,1,0,0,0,1578,1570,1,0,0,0,1579,1582,1,0,0,0,1580,
        1578,1,0,0,0,1580,1581,1,0,0,0,1581,1585,1,0,0,0,1582,1580,1,0,0,
        0,1583,1584,5,147,0,0,1584,1586,3,64,32,0,1585,1583,1,0,0,0,1585,
        1586,1,0,0,0,1586,1591,1,0,0,0,1587,1589,3,130,65,0,1588,1587,1,
        0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1592,3,132,66,0,1591,
        1588,1,0,0,0,1591,1592,1,0,0,0,1592,107,1,0,0,0,1593,1594,3,176,
        88,0,1594,1595,5,2,0,0,1595,1597,1,0,0,0,1596,1593,1,0,0,0,1596,
        1597,1,0,0,0,1597,1598,1,0,0,0,1598,1601,3,178,89,0,1599,1600,5,
        33,0,0,1600,1602,3,208,104,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,
        1602,1608,1,0,0,0,1603,1604,5,85,0,0,1604,1605,5,40,0,0,1605,1609,
        3,190,95,0,1606,1607,5,102,0,0,1607,1609,5,85,0,0,1608,1603,1,0,
        0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,109,1,0,0,0,1610,1612,
        5,142,0,0,1611,1613,3,176,88,0,1612,1611,1,0,0,0,1612,1613,1,0,0,
        0,1613,1616,1,0,0,0,1614,1615,5,91,0,0,1615,1617,3,210,105,0,1616,
        1614,1,0,0,0,1616,1617,1,0,0,0,1617,111,1,0,0,0,1618,1619,5,177,
        0,0,1619,1620,5,3,0,0,1620,1621,5,147,0,0,1621,1622,3,64,32,0,1622,
        1623,5,4,0,0,1623,113,1,0,0,0,1624,1626,5,3,0,0,1625,1627,3,212,
        106,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1638,1,0,0,0,1628,
        1629,5,152,0,0,1629,1630,5,40,0,0,1630,1635,3,64,32,0,1631,1632,
        5,5,0,0,1632,1634,3,64,32,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,
        1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,1639,1,0,0,0,1637,1635,
        1,0,0,0,1638,1628,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,
        1641,5,109,0,0,1641,1642,5,40,0,0,1642,1647,3,134,67,0,1643,1644,
        5,5,0,0,1644,1646,3,134,67,0,1645,1643,1,0,0,0,1646,1649,1,0,0,0,
        1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,1651,1,0,0,0,1649,1647,
        1,0,0,0,1650,1652,3,118,59,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,
        1652,1653,1,0,0,0,1653,1654,5,4,0,0,1654,115,1,0,0,0,1655,1689,5,
        151,0,0,1656,1690,3,206,103,0,1657,1659,5,3,0,0,1658,1660,3,212,
        106,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1671,1,0,0,0,1661,
        1662,5,152,0,0,1662,1663,5,40,0,0,1663,1668,3,64,32,0,1664,1665,
        5,5,0,0,1665,1667,3,64,32,0,1666,1664,1,0,0,0,1667,1670,1,0,0,0,
        1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,1672,1,0,0,0,1670,1668,
        1,0,0,0,1671,1661,1,0,0,0,1671,1672,1,0,0,0,1672,1683,1,0,0,0,1673,
        1674,5,109,0,0,1674,1675,5,40,0,0,1675,1680,3,134,67,0,1676,1677,
        5,5,0,0,1677,1679,3,134,67,0,1678,1676,1,0,0,0,1679,1682,1,0,0,0,
        1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1684,1,0,0,0,1682,1680,
        1,0,0,0,1683,1673,1,0,0,0,1683,1684,1,0,0,0,1684,1686,1,0,0,0,1685,
        1687,3,118,59,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,
        0,0,0,1688,1690,5,4,0,0,1689,1656,1,0,0,0,1689,1657,1,0,0,0,1690,
        117,1,0,0,0,1691,1699,3,120,60,0,1692,1693,5,179,0,0,1693,1694,5,
        101,0,0,1694,1700,5,181,0,0,1695,1696,5,156,0,0,1696,1700,5,126,
        0,0,1697,1700,5,78,0,0,1698,1700,5,180,0,0,1699,1692,1,0,0,0,1699,
        1695,1,0,0,0,1699,1697,1,0,0,0,1699,1698,1,0,0,0,1699,1700,1,0,0,
        0,1700,119,1,0,0,0,1701,1708,7,17,0,0,1702,1709,3,142,71,0,1703,
        1704,5,39,0,0,1704,1705,3,138,69,0,1705,1706,5,32,0,0,1706,1707,
        3,140,70,0,1707,1709,1,0,0,0,1708,1702,1,0,0,0,1708,1703,1,0,0,0,
        1709,121,1,0,0,0,1710,1711,3,214,107,0,1711,1721,5,3,0,0,1712,1717,
        3,64,32,0,1713,1714,5,5,0,0,1714,1716,3,64,32,0,1715,1713,1,0,0,
        0,1716,1719,1,0,0,0,1717,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1722,
        1,0,0,0,1719,1717,1,0,0,0,1720,1722,5,7,0,0,1721,1712,1,0,0,0,1721,
        1720,1,0,0,0,1722,1723,1,0,0,0,1723,1724,5,4,0,0,1724,123,1,0,0,
        0,1725,1726,3,216,108,0,1726,1739,5,3,0,0,1727,1729,5,62,0,0,1728,
        1727,1,0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1735,3,64,
        32,0,1731,1732,5,5,0,0,1732,1734,3,64,32,0,1733,1731,1,0,0,0,1734,
        1737,1,0,0,0,1735,1733,1,0,0,0,1735,1736,1,0,0,0,1736,1740,1,0,0,
        0,1737,1735,1,0,0,0,1738,1740,5,7,0,0,1739,1728,1,0,0,0,1739,1738,
        1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,1743,5,4,0,0,1742,
        1744,3,112,56,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,125,1,0,
        0,0,1745,1746,3,144,72,0,1746,1756,5,3,0,0,1747,1752,3,64,32,0,1748,
        1749,5,5,0,0,1749,1751,3,64,32,0,1750,1748,1,0,0,0,1751,1754,1,0,
        0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,1757,1,0,0,0,1754,1752,
        1,0,0,0,1755,1757,5,7,0,0,1756,1747,1,0,0,0,1756,1755,1,0,0,0,1756,
        1757,1,0,0,0,1757,1758,1,0,0,0,1758,1760,5,4,0,0,1759,1761,3,112,
        56,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,
        1765,5,151,0,0,1763,1766,3,114,57,0,1764,1766,3,206,103,0,1765,1763,
        1,0,0,0,1765,1764,1,0,0,0,1766,127,1,0,0,0,1767,1769,5,148,0,0,1768,
        1770,5,116,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,
        0,0,1771,1776,3,54,27,0,1772,1773,5,5,0,0,1773,1775,3,54,27,0,1774,
        1772,1,0,0,0,1775,1778,1,0,0,0,1776,1774,1,0,0,0,1776,1777,1,0,0,
        0,1777,129,1,0,0,0,1778,1776,1,0,0,0,1779,1780,5,109,0,0,1780,1781,
        5,40,0,0,1781,1786,3,134,67,0,1782,1783,5,5,0,0,1783,1785,3,134,
        67,0,1784,1782,1,0,0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,
        1787,1,0,0,0,1787,131,1,0,0,0,1788,1786,1,0,0,0,1789,1790,5,98,0,
        0,1790,1793,3,64,32,0,1791,1792,7,18,0,0,1792,1794,3,64,32,0,1793,
        1791,1,0,0,0,1793,1794,1,0,0,0,1794,133,1,0,0,0,1795,1798,3,64,32,
        0,1796,1797,5,45,0,0,1797,1799,3,186,93,0,1798,1796,1,0,0,0,1798,
        1799,1,0,0,0,1799,1801,1,0,0,0,1800,1802,3,136,68,0,1801,1800,1,
        0,0,0,1801,1802,1,0,0,0,1802,1805,1,0,0,0,1803,1804,5,174,0,0,1804,
        1806,7,19,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,135,1,0,0,
        0,1807,1808,7,20,0,0,1808,137,1,0,0,0,1809,1810,3,64,32,0,1810,1811,
        5,154,0,0,1811,1820,1,0,0,0,1812,1813,3,64,32,0,1813,1814,5,157,
        0,0,1814,1820,1,0,0,0,1815,1816,5,156,0,0,1816,1820,5,126,0,0,1817,
        1818,5,155,0,0,1818,1820,5,154,0,0,1819,1809,1,0,0,0,1819,1812,1,
        0,0,0,1819,1815,1,0,0,0,1819,1817,1,0,0,0,1820,139,1,0,0,0,1821,
        1822,3,64,32,0,1822,1823,5,154,0,0,1823,1832,1,0,0,0,1824,1825,3,
        64,32,0,1825,1826,5,157,0,0,1826,1832,1,0,0,0,1827,1828,5,156,0,
        0,1828,1832,5,126,0,0,1829,1830,5,155,0,0,1830,1832,5,157,0,0,1831,
        1821,1,0,0,0,1831,1824,1,0,0,0,1831,1827,1,0,0,0,1831,1829,1,0,0,
        0,1832,141,1,0,0,0,1833,1834,3,64,32,0,1834,1835,5,154,0,0,1835,
        1841,1,0,0,0,1836,1837,5,155,0,0,1837,1841,5,154,0,0,1838,1839,5,
        156,0,0,1839,1841,5,126,0,0,1840,1833,1,0,0,0,1840,1836,1,0,0,0,
        1840,1838,1,0,0,0,1841,143,1,0,0,0,1842,1843,7,21,0,0,1843,1844,
        5,3,0,0,1844,1845,3,64,32,0,1845,1846,5,4,0,0,1846,1847,5,151,0,
        0,1847,1849,5,3,0,0,1848,1850,3,150,75,0,1849,1848,1,0,0,0,1849,
        1850,1,0,0,0,1850,1851,1,0,0,0,1851,1853,3,154,77,0,1852,1854,3,
        120,60,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,
        1856,5,4,0,0,1856,1928,1,0,0,0,1857,1858,7,22,0,0,1858,1859,5,3,
        0,0,1859,1860,5,4,0,0,1860,1861,5,151,0,0,1861,1863,5,3,0,0,1862,
        1864,3,150,75,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1866,1,
        0,0,0,1865,1867,3,152,76,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,
        1868,1,0,0,0,1868,1928,5,4,0,0,1869,1870,7,23,0,0,1870,1871,5,3,
        0,0,1871,1872,5,4,0,0,1872,1873,5,151,0,0,1873,1875,5,3,0,0,1874,
        1876,3,150,75,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,
        0,0,0,1877,1878,3,154,77,0,1878,1879,5,4,0,0,1879,1928,1,0,0,0,1880,
        1881,7,24,0,0,1881,1882,5,3,0,0,1882,1884,3,64,32,0,1883,1885,3,
        146,73,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,
        1888,3,148,74,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1889,1,
        0,0,0,1889,1890,5,4,0,0,1890,1891,5,151,0,0,1891,1893,5,3,0,0,1892,
        1894,3,150,75,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,
        0,0,0,1895,1896,3,154,77,0,1896,1897,5,4,0,0,1897,1928,1,0,0,0,1898,
        1899,5,163,0,0,1899,1900,5,3,0,0,1900,1901,3,64,32,0,1901,1902,5,
        5,0,0,1902,1903,3,34,17,0,1903,1904,5,4,0,0,1904,1905,5,151,0,0,
        1905,1907,5,3,0,0,1906,1908,3,150,75,0,1907,1906,1,0,0,0,1907,1908,
        1,0,0,0,1908,1909,1,0,0,0,1909,1911,3,154,77,0,1910,1912,3,120,60,
        0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,1,0,0,0,1913,1914,
        5,4,0,0,1914,1928,1,0,0,0,1915,1916,5,164,0,0,1916,1917,5,3,0,0,
        1917,1918,3,64,32,0,1918,1919,5,4,0,0,1919,1920,5,151,0,0,1920,1922,
        5,3,0,0,1921,1923,3,150,75,0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,
        1923,1924,1,0,0,0,1924,1925,3,154,77,0,1925,1926,5,4,0,0,1926,1928,
        1,0,0,0,1927,1842,1,0,0,0,1927,1857,1,0,0,0,1927,1869,1,0,0,0,1927,
        1880,1,0,0,0,1927,1898,1,0,0,0,1927,1915,1,0,0,0,1928,145,1,0,0,
        0,1929,1930,5,5,0,0,1930,1931,3,34,17,0,1931,147,1,0,0,0,1932,1933,
        5,5,0,0,1933,1934,3,34,17,0,1934,149,1,0,0,0,1935,1936,5,152,0,0,
        1936,1938,5,40,0,0,1937,1939,3,64,32,0,1938,1937,1,0,0,0,1939,1940,
        1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,151,1,0,0,0,1942,
        1943,5,109,0,0,1943,1945,5,40,0,0,1944,1946,3,64,32,0,1945,1944,
        1,0,0,0,1946,1947,1,0,0,0,1947,1945,1,0,0,0,1947,1948,1,0,0,0,1948,
        153,1,0,0,0,1949,1950,5,109,0,0,1950,1951,5,40,0,0,1951,1952,3,154,
        77,0,1952,155,1,0,0,0,1953,1955,3,64,32,0,1954,1956,3,136,68,0,1955,
        1954,1,0,0,0,1955,1956,1,0,0,0,1956,1964,1,0,0,0,1957,1958,5,5,0,
        0,1958,1960,3,64,32,0,1959,1961,3,136,68,0,1960,1959,1,0,0,0,1960,
        1961,1,0,0,0,1961,1963,1,0,0,0,1962,1957,1,0,0,0,1963,1966,1,0,0,
        0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,157,1,0,0,0,1966,1964,
        1,0,0,0,1967,1968,3,80,40,0,1968,159,1,0,0,0,1969,1970,3,80,40,0,
        1970,161,1,0,0,0,1971,1972,7,25,0,0,1972,163,1,0,0,0,1973,1974,5,
        187,0,0,1974,165,1,0,0,0,1975,1978,3,64,32,0,1976,1978,3,28,14,0,
        1977,1975,1,0,0,0,1977,1976,1,0,0,0,1978,167,1,0,0,0,1979,1980,7,
        26,0,0,1980,169,1,0,0,0,1981,1982,7,27,0,0,1982,171,1,0,0,0,1983,
        1984,3,220,110,0,1984,173,1,0,0,0,1985,1986,3,220,110,0,1986,175,
        1,0,0,0,1987,1988,3,220,110,0,1988,177,1,0,0,0,1989,1990,3,220,110,
        0,1990,179,1,0,0,0,1991,1992,3,220,110,0,1992,181,1,0,0,0,1993,1994,
        3,220,110,0,1994,183,1,0,0,0,1995,1996,3,220,110,0,1996,185,1,0,
        0,0,1997,1998,3,220,110,0,1998,187,1,0,0,0,1999,2000,3,220,110,0,
        2000,189,1,0,0,0,2001,2002,3,220,110,0,2002,191,1,0,0,0,2003,2004,
        3,220,110,0,2004,193,1,0,0,0,2005,2006,3,220,110,0,2006,195,1,0,
        0,0,2007,2008,3,220,110,0,2008,197,1,0,0,0,2009,2010,3,220,110,0,
        2010,199,1,0,0,0,2011,2012,3,220,110,0,2012,201,1,0,0,0,2013,2014,
        3,220,110,0,2014,203,1,0,0,0,2015,2016,3,220,110,0,2016,205,1,0,
        0,0,2017,2018,3,220,110,0,2018,207,1,0,0,0,2019,2020,3,220,110,0,
        2020,209,1,0,0,0,2021,2022,3,220,110,0,2022,211,1,0,0,0,2023,2024,
        3,220,110,0,2024,213,1,0,0,0,2025,2026,3,220,110,0,2026,215,1,0,
        0,0,2027,2028,3,220,110,0,2028,217,1,0,0,0,2029,2030,3,220,110,0,
        2030,219,1,0,0,0,2031,2039,5,184,0,0,2032,2039,3,170,85,0,2033,2039,
        5,187,0,0,2034,2035,5,3,0,0,2035,2036,3,220,110,0,2036,2037,5,4,
        0,0,2037,2039,1,0,0,0,2038,2031,1,0,0,0,2038,2032,1,0,0,0,2038,2033,
        1,0,0,0,2038,2034,1,0,0,0,2039,221,1,0,0,0,288,225,233,240,245,251,
        257,259,285,292,299,305,309,312,319,322,326,334,338,340,344,348,
        352,355,362,368,374,379,390,396,400,404,407,411,417,422,431,438,
        444,448,452,457,463,475,479,484,487,490,495,498,512,519,526,528,
        531,537,542,550,555,570,576,586,591,601,605,607,611,616,618,626,
        632,637,644,655,658,660,667,671,678,684,690,696,701,710,715,726,
        731,742,747,751,767,777,782,790,802,807,815,822,825,832,835,838,
        842,850,855,865,870,879,886,890,894,897,905,918,921,929,938,942,
        947,977,989,994,1006,1012,1019,1023,1033,1036,1042,1048,1057,1060,
        1064,1066,1068,1077,1084,1091,1097,1102,1110,1115,1124,1135,1142,
        1146,1149,1153,1163,1169,1171,1179,1186,1193,1198,1200,1206,1215,
        1220,1227,1231,1233,1236,1244,1248,1251,1257,1261,1266,1273,1282,
        1286,1288,1292,1301,1306,1308,1321,1324,1333,1344,1351,1354,1359,
        1363,1366,1369,1374,1378,1383,1386,1389,1394,1398,1401,1408,1413,
        1422,1427,1430,1438,1442,1450,1453,1455,1464,1467,1469,1473,1477,
        1481,1484,1495,1500,1504,1508,1511,1516,1522,1529,1536,1541,1549,
        1555,1560,1566,1573,1580,1585,1588,1591,1596,1601,1608,1612,1616,
        1626,1635,1638,1647,1651,1659,1668,1671,1680,1683,1686,1689,1699,
        1708,1717,1721,1728,1735,1739,1743,1752,1756,1760,1765,1769,1776,
        1786,1793,1798,1801,1805,1819,1831,1840,1849,1853,1863,1866,1875,
        1884,1887,1893,1907,1911,1922,1927,1940,1947,1955,1960,1964,1977,
        2038
    ]

class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", 
                      "ANALYZE_", "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                      "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                      "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                      "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                      "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
                      "DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", 
                      "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", 
                      "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                      "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", 
                      "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", 
                      "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", 
                      "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", 
                      "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", 
                      "ORDER_", "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", 
                      "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                      "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_", 
                      "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_", 
                      "SELECT_", "SET_", "TABLE_", "TEMP_", "TEMPORARY_", 
                      "THEN_", "TO_", "TRANSACTION_", "TRIGGER_", "UNION_", 
                      "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", "VALUES_", 
                      "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", "WITH_", "WITHOUT_", 
                      "FIRST_VALUE_", "OVER_", "PARTITION_", "RANGE_", "PRECEDING_", 
                      "UNBOUNDED_", "CURRENT_", "FOLLOWING_", "CUME_DIST_", 
                      "DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", "NTH_VALUE_", 
                      "NTILE_", "PERCENT_RANK_", "RANK_", "ROW_NUMBER_", 
                      "GENERATED_", "ALWAYS_", "STORED_", "TRUE_", "FALSE_", 
                      "WINDOW_", "NULLS_", "FIRST_", "LAST_", "FILTER_", 
                      "GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", "DO_", 
                      "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_alter_table_stmt = 3
    RULE_analyze_stmt = 4
    RULE_attach_stmt = 5
    RULE_begin_stmt = 6
    RULE_commit_stmt = 7
    RULE_rollback_stmt = 8
    RULE_savepoint_stmt = 9
    RULE_release_stmt = 10
    RULE_create_index_stmt = 11
    RULE_indexed_column = 12
    RULE_create_table_stmt = 13
    RULE_column_def = 14
    RULE_type_name = 15
    RULE_column_constraint = 16
    RULE_signed_number = 17
    RULE_table_constraint = 18
    RULE_foreign_key_clause = 19
    RULE_conflict_clause = 20
    RULE_create_trigger_stmt = 21
    RULE_create_view_stmt = 22
    RULE_create_virtual_table_stmt = 23
    RULE_with_clause = 24
    RULE_cte_table_name = 25
    RULE_recursive_cte = 26
    RULE_common_table_expression = 27
    RULE_delete_stmt = 28
    RULE_delete_stmt_limited = 29
    RULE_detach_stmt = 30
    RULE_drop_stmt = 31
    RULE_expr = 32
    RULE_raise_function = 33
    RULE_literal_value = 34
    RULE_insert_stmt = 35
    RULE_upsert_clause = 36
    RULE_pragma_stmt = 37
    RULE_pragma_value = 38
    RULE_reindex_stmt = 39
    RULE_select_stmt = 40
    RULE_join_clause = 41
    RULE_select_core = 42
    RULE_factored_select_stmt = 43
    RULE_simple_select_stmt = 44
    RULE_compound_select_stmt = 45
    RULE_table_or_subquery = 46
    RULE_result_column = 47
    RULE_join_operator = 48
    RULE_join_constraint = 49
    RULE_compound_operator = 50
    RULE_update_stmt = 51
    RULE_column_name_list = 52
    RULE_update_stmt_limited = 53
    RULE_qualified_table_name = 54
    RULE_vacuum_stmt = 55
    RULE_filter_clause = 56
    RULE_window_defn = 57
    RULE_over_clause = 58
    RULE_frame_spec = 59
    RULE_frame_clause = 60
    RULE_simple_function_invocation = 61
    RULE_aggregate_function_invocation = 62
    RULE_window_function_invocation = 63
    RULE_common_table_stmt = 64
    RULE_order_by_stmt = 65
    RULE_limit_stmt = 66
    RULE_ordering_term = 67
    RULE_asc_desc = 68
    RULE_frame_left = 69
    RULE_frame_right = 70
    RULE_frame_single = 71
    RULE_window_function = 72
    RULE_of_OF_fset = 73
    RULE_default_DEFAULT__value = 74
    RULE_partition_by = 75
    RULE_order_by_expr = 76
    RULE_order_by_expr_asc_desc = 77
    RULE_expr_asc_desc = 78
    RULE_initial_select = 79
    RULE_recursive__select = 80
    RULE_unary_operator = 81
    RULE_error_message = 82
    RULE_module_argument = 83
    RULE_column_alias = 84
    RULE_keyword = 85
    RULE_name = 86
    RULE_function_name = 87
    RULE_schema_name = 88
    RULE_table_name = 89
    RULE_table_or_index_name = 90
    RULE_new_table_name = 91
    RULE_column_name = 92
    RULE_collation_name = 93
    RULE_foreign_table = 94
    RULE_index_name = 95
    RULE_trigger_name = 96
    RULE_view_name = 97
    RULE_module_name = 98
    RULE_pragma_name = 99
    RULE_savepoint_name = 100
    RULE_table_alias = 101
    RULE_transaction_name = 102
    RULE_window_name = 103
    RULE_alias = 104
    RULE_filename = 105
    RULE_base_window_name = 106
    RULE_simple_func = 107
    RULE_aggregate_func = 108
    RULE_table_function_name = 109
    RULE_any_name = 110

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "upsert_clause", "pragma_stmt", "pragma_value", 
                   "reindex_stmt", "select_stmt", "join_clause", "select_core", 
                   "factored_select_stmt", "simple_select_stmt", "compound_select_stmt", 
                   "table_or_subquery", "result_column", "join_operator", 
                   "join_constraint", "compound_operator", "update_stmt", 
                   "column_name_list", "update_stmt_limited", "qualified_table_name", 
                   "vacuum_stmt", "filter_clause", "window_defn", "over_clause", 
                   "frame_spec", "frame_clause", "simple_function_invocation", 
                   "aggregate_function_invocation", "window_function_invocation", 
                   "common_table_stmt", "order_by_stmt", "limit_stmt", "ordering_term", 
                   "asc_desc", "frame_left", "frame_right", "frame_single", 
                   "window_function", "of_OF_fset", "default_DEFAULT__value", 
                   "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive__select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "window_name", "alias", "filename", "base_window_name", 
                   "simple_func", "aggregate_func", "table_function_name", 
                   "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT_=25
    ACTION_=26
    ADD_=27
    AFTER_=28
    ALL_=29
    ALTER_=30
    ANALYZE_=31
    AND_=32
    AS_=33
    ASC_=34
    ATTACH_=35
    AUTOINCREMENT_=36
    BEFORE_=37
    BEGIN_=38
    BETWEEN_=39
    BY_=40
    CASCADE_=41
    CASE_=42
    CAST_=43
    CHECK_=44
    COLLATE_=45
    COLUMN_=46
    COMMIT_=47
    CONFLICT_=48
    CONSTRAINT_=49
    CREATE_=50
    CROSS_=51
    CURRENT_DATE_=52
    CURRENT_TIME_=53
    CURRENT_TIMESTAMP_=54
    DATABASE_=55
    DEFAULT_=56
    DEFERRABLE_=57
    DEFERRED_=58
    DELETE_=59
    DESC_=60
    DETACH_=61
    DISTINCT_=62
    DROP_=63
    EACH_=64
    ELSE_=65
    END_=66
    ESCAPE_=67
    EXCEPT_=68
    EXCLUSIVE_=69
    EXISTS_=70
    EXPLAIN_=71
    FAIL_=72
    FOR_=73
    FOREIGN_=74
    FROM_=75
    FULL_=76
    GLOB_=77
    GROUP_=78
    HAVING_=79
    IF_=80
    IGNORE_=81
    IMMEDIATE_=82
    IN_=83
    INDEX_=84
    INDEXED_=85
    INITIALLY_=86
    INNER_=87
    INSERT_=88
    INSTEAD_=89
    INTERSECT_=90
    INTO_=91
    IS_=92
    ISNULL_=93
    JOIN_=94
    KEY_=95
    LEFT_=96
    LIKE_=97
    LIMIT_=98
    MATCH_=99
    NATURAL_=100
    NO_=101
    NOT_=102
    NOTNULL_=103
    NULL_=104
    OF_=105
    OFFSET_=106
    ON_=107
    OR_=108
    ORDER_=109
    OUTER_=110
    PLAN_=111
    PRAGMA_=112
    PRIMARY_=113
    QUERY_=114
    RAISE_=115
    RECURSIVE_=116
    REFERENCES_=117
    REGEXP_=118
    REINDEX_=119
    RELEASE_=120
    RENAME_=121
    REPLACE_=122
    RESTRICT_=123
    RIGHT_=124
    ROLLBACK_=125
    ROW_=126
    ROWS_=127
    SAVEPOINT_=128
    SELECT_=129
    SET_=130
    TABLE_=131
    TEMP_=132
    TEMPORARY_=133
    THEN_=134
    TO_=135
    TRANSACTION_=136
    TRIGGER_=137
    UNION_=138
    UNIQUE_=139
    UPDATE_=140
    USING_=141
    VACUUM_=142
    VALUES_=143
    VIEW_=144
    VIRTUAL_=145
    WHEN_=146
    WHERE_=147
    WITH_=148
    WITHOUT_=149
    FIRST_VALUE_=150
    OVER_=151
    PARTITION_=152
    RANGE_=153
    PRECEDING_=154
    UNBOUNDED_=155
    CURRENT_=156
    FOLLOWING_=157
    CUME_DIST_=158
    DENSE_RANK_=159
    LAG_=160
    LAST_VALUE_=161
    LEAD_=162
    NTH_VALUE_=163
    NTILE_=164
    PERCENT_RANK_=165
    RANK_=166
    ROW_NUMBER_=167
    GENERATED_=168
    ALWAYS_=169
    STORED_=170
    TRUE_=171
    FALSE_=172
    WINDOW_=173
    NULLS_=174
    FIRST_=175
    LAST_=176
    FILTER_=177
    GROUPS_=178
    EXCLUDE_=179
    TIES_=180
    OTHERS_=181
    DO_=182
    NOTHING_=183
    IDENTIFIER=184
    NUMERIC_LITERAL=185
    BIND_PARAMETER=186
    STRING_LITERAL=187
    BLOB_LITERAL=188
    SINGLE_LINE_COMMENT=189
    MULTILINE_COMMENT=190
    SPACES=191
    UNEXPECTED_CHAR=192

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.END_ - 66)) | (1 << (SQLiteParser.EXPLAIN_ - 66)) | (1 << (SQLiteParser.INSERT_ - 66)) | (1 << (SQLiteParser.PRAGMA_ - 66)) | (1 << (SQLiteParser.REINDEX_ - 66)) | (1 << (SQLiteParser.RELEASE_ - 66)) | (1 << (SQLiteParser.REPLACE_ - 66)) | (1 << (SQLiteParser.ROLLBACK_ - 66)) | (1 << (SQLiteParser.SAVEPOINT_ - 66)) | (1 << (SQLiteParser.SELECT_ - 66)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (SQLiteParser.UPDATE_ - 140)) | (1 << (SQLiteParser.VACUUM_ - 140)) | (1 << (SQLiteParser.VALUES_ - 140)) | (1 << (SQLiteParser.WITH_ - 140)))) != 0):
                self.state = 222
                self.sql_stmt_list()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 230
                self.match(SQLiteParser.SCOL)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.sql_stmt()
            self.state = 245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 238 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 237
                        self.match(SQLiteParser.SCOL)
                        self.state = 240 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 242
                    self.sql_stmt() 
                self.state = 247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248
                    self.match(SQLiteParser.SCOL) 
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.EXPLAIN_:
                self.state = 254
                self.match(SQLiteParser.EXPLAIN_)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.QUERY_:
                    self.state = 255
                    self.match(SQLiteParser.QUERY_)
                    self.state = 256
                    self.match(SQLiteParser.PLAN_)




            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 261
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 262
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 263
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 264
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 265
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 266
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 267
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 268
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 269
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 270
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 271
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 272
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 273
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 274
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 275
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 276
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 277
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 278
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 279
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 280
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 281
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 282
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 283
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 284
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(SQLiteParser.ALTER_)
            self.state = 288
            self.match(SQLiteParser.TABLE_)
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 289
                self.schema_name()
                self.state = 290
                self.match(SQLiteParser.DOT)


            self.state = 294
            self.table_name()
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.RENAME_]:
                self.state = 295
                self.match(SQLiteParser.RENAME_)
                self.state = 305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 296
                    self.match(SQLiteParser.TO_)
                    self.state = 297
                    self.new_table_name()
                    pass

                elif la_ == 2:
                    self.state = 299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 298
                        self.match(SQLiteParser.COLUMN_)


                    self.state = 301
                    localctx.old_column_name = self.column_name()
                    self.state = 302
                    self.match(SQLiteParser.TO_)
                    self.state = 303
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [SQLiteParser.ADD_]:
                self.state = 307
                self.match(SQLiteParser.ADD_)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 308
                    self.match(SQLiteParser.COLUMN_)


                self.state = 311
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(SQLiteParser.ANALYZE_)
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 315
                self.schema_name()

            elif la_ == 2:
                self.state = 319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 316
                    self.schema_name()
                    self.state = 317
                    self.match(SQLiteParser.DOT)


                self.state = 321
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(SQLiteParser.ATTACH_)
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 325
                self.match(SQLiteParser.DATABASE_)


            self.state = 328
            self.expr(0)
            self.state = 329
            self.match(SQLiteParser.AS_)
            self.state = 330
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(SQLiteParser.BEGIN_)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) != 0):
                self.state = 333
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 336
                self.match(SQLiteParser.TRANSACTION_)
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 337
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.COMMIT_ or _la==SQLiteParser.END_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 343
                self.match(SQLiteParser.TRANSACTION_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(SQLiteParser.ROLLBACK_)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 347
                self.match(SQLiteParser.TRANSACTION_)


            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TO_:
                self.state = 350
                self.match(SQLiteParser.TO_)
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 351
                    self.match(SQLiteParser.SAVEPOINT_)


                self.state = 354
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(SQLiteParser.SAVEPOINT_)
            self.state = 358
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(SQLiteParser.RELEASE_)
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 361
                self.match(SQLiteParser.SAVEPOINT_)


            self.state = 364
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(SQLiteParser.CREATE_)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.UNIQUE_:
                self.state = 367
                self.match(SQLiteParser.UNIQUE_)


            self.state = 370
            self.match(SQLiteParser.INDEX_)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 371
                self.match(SQLiteParser.IF_)
                self.state = 372
                self.match(SQLiteParser.NOT_)
                self.state = 373
                self.match(SQLiteParser.EXISTS_)


            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 376
                self.schema_name()
                self.state = 377
                self.match(SQLiteParser.DOT)


            self.state = 381
            self.index_name()
            self.state = 382
            self.match(SQLiteParser.ON_)
            self.state = 383
            self.table_name()
            self.state = 384
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 385
            self.indexed_column()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 386
                self.match(SQLiteParser.COMMA)
                self.state = 387
                self.indexed_column()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 393
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 394
                self.match(SQLiteParser.WHERE_)
                self.state = 395
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 398
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 399
                self.expr(0)
                pass


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE_:
                self.state = 402
                self.match(SQLiteParser.COLLATE_)
                self.state = 403
                self.collation_name()


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 406
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_ROW_ID = None # Token

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(SQLiteParser.CREATE_)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 410
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 413
            self.match(SQLiteParser.TABLE_)
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 414
                self.match(SQLiteParser.IF_)
                self.state = 415
                self.match(SQLiteParser.NOT_)
                self.state = 416
                self.match(SQLiteParser.EXISTS_)


            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 419
                self.schema_name()
                self.state = 420
                self.match(SQLiteParser.DOT)


            self.state = 424
            self.table_name()
            self.state = 448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 425
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 426
                self.column_def()
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 427
                        self.match(SQLiteParser.COMMA)
                        self.state = 428
                        self.column_def() 
                    self.state = 433
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 434
                    self.match(SQLiteParser.COMMA)
                    self.state = 435
                    self.table_constraint()
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 441
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITHOUT_:
                    self.state = 442
                    self.match(SQLiteParser.WITHOUT_)
                    self.state = 443
                    localctx.row_ROW_ID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [SQLiteParser.AS_]:
                self.state = 446
                self.match(SQLiteParser.AS_)
                self.state = 447
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.column_name()
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 451
                self.type_name()


            self.state = 457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 454
                    self.column_constraint() 
                self.state = 459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 460
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 463 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 465
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 466
                self.signed_number()
                self.state = 467
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 469
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 470
                self.signed_number()
                self.state = 471
                self.match(SQLiteParser.COMMA)
                self.state = 472
                self.signed_number()
                self.state = 473
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT_:
                self.state = 477
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 478
                self.name()


            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY_]:
                self.state = 481
                self.match(SQLiteParser.PRIMARY_)
                self.state = 482
                self.match(SQLiteParser.KEY_)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                    self.state = 483
                    self.asc_desc()


                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 486
                    self.conflict_clause()


                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AUTOINCREMENT_:
                    self.state = 489
                    self.match(SQLiteParser.AUTOINCREMENT_)


                pass
            elif token in [SQLiteParser.NOT_, SQLiteParser.UNIQUE_]:
                self.state = 495
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.NOT_]:
                    self.state = 492
                    self.match(SQLiteParser.NOT_)
                    self.state = 493
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [SQLiteParser.UNIQUE_]:
                    self.state = 494
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 497
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK_]:
                self.state = 500
                self.match(SQLiteParser.CHECK_)
                self.state = 501
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 502
                self.expr(0)
                self.state = 503
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DEFAULT_]:
                self.state = 505
                self.match(SQLiteParser.DEFAULT_)
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 506
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 507
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 508
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 509
                    self.expr(0)
                    self.state = 510
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.COLLATE_]:
                self.state = 514
                self.match(SQLiteParser.COLLATE_)
                self.state = 515
                self.collation_name()
                pass
            elif token in [SQLiteParser.REFERENCES_]:
                self.state = 516
                self.foreign_key_clause()
                pass
            elif token in [SQLiteParser.AS_, SQLiteParser.GENERATED_]:
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GENERATED_:
                    self.state = 517
                    self.match(SQLiteParser.GENERATED_)
                    self.state = 518
                    self.match(SQLiteParser.ALWAYS_)


                self.state = 521
                self.match(SQLiteParser.AS_)
                self.state = 522
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 523
                self.expr(0)
                self.state = 524
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.VIRTUAL_ or _la==SQLiteParser.STORED_:
                    self.state = 525
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.VIRTUAL_ or _la==SQLiteParser.STORED_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 530
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 533
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT_:
                self.state = 535
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 536
                self.name()


            self.state = 576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY_, SQLiteParser.UNIQUE_]:
                self.state = 542
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.PRIMARY_]:
                    self.state = 539
                    self.match(SQLiteParser.PRIMARY_)
                    self.state = 540
                    self.match(SQLiteParser.KEY_)
                    pass
                elif token in [SQLiteParser.UNIQUE_]:
                    self.state = 541
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 544
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 545
                self.indexed_column()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 546
                    self.match(SQLiteParser.COMMA)
                    self.state = 547
                    self.indexed_column()
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 553
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 554
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK_]:
                self.state = 557
                self.match(SQLiteParser.CHECK_)
                self.state = 558
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 559
                self.expr(0)
                self.state = 560
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.FOREIGN_]:
                self.state = 562
                self.match(SQLiteParser.FOREIGN_)
                self.state = 563
                self.match(SQLiteParser.KEY_)
                self.state = 564
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 565
                self.column_name()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 566
                    self.match(SQLiteParser.COMMA)
                    self.state = 567
                    self.column_name()
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 573
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 574
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON_)
            else:
                return self.getToken(SQLiteParser.ON_, i)

        def MATCH_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH_)
            else:
                return self.getToken(SQLiteParser.MATCH_, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DELETE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE_)
            else:
                return self.getToken(SQLiteParser.DELETE_, i)

        def UPDATE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE_)
            else:
                return self.getToken(SQLiteParser.UPDATE_, i)

        def SET_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET_)
            else:
                return self.getToken(SQLiteParser.SET_, i)

        def CASCADE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE_)
            else:
                return self.getToken(SQLiteParser.CASCADE_, i)

        def RESTRICT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT_)
            else:
                return self.getToken(SQLiteParser.RESTRICT_, i)

        def NO_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO_)
            else:
                return self.getToken(SQLiteParser.NO_, i)

        def ACTION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION_)
            else:
                return self.getToken(SQLiteParser.ACTION_, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT_)
            else:
                return self.getToken(SQLiteParser.DEFAULT_, i)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(SQLiteParser.REFERENCES_)
            self.state = 579
            self.foreign_table()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 580
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 581
                self.column_name()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 582
                    self.match(SQLiteParser.COMMA)
                    self.state = 583
                    self.column_name()
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 589
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.MATCH_ or _la==SQLiteParser.ON_:
                self.state = 605
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.ON_]:
                    self.state = 593
                    self.match(SQLiteParser.ON_)
                    self.state = 594
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DELETE_ or _la==SQLiteParser.UPDATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 601
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLiteParser.SET_]:
                        self.state = 595
                        self.match(SQLiteParser.SET_)
                        self.state = 596
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.DEFAULT_ or _la==SQLiteParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SQLiteParser.CASCADE_]:
                        self.state = 597
                        self.match(SQLiteParser.CASCADE_)
                        pass
                    elif token in [SQLiteParser.RESTRICT_]:
                        self.state = 598
                        self.match(SQLiteParser.RESTRICT_)
                        pass
                    elif token in [SQLiteParser.NO_]:
                        self.state = 599
                        self.match(SQLiteParser.NO_)
                        self.state = 600
                        self.match(SQLiteParser.ACTION_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [SQLiteParser.MATCH_]:
                    self.state = 603
                    self.match(SQLiteParser.MATCH_)
                    self.state = 604
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NOT_:
                    self.state = 610
                    self.match(SQLiteParser.NOT_)


                self.state = 613
                self.match(SQLiteParser.DEFERRABLE_)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.INITIALLY_:
                    self.state = 614
                    self.match(SQLiteParser.INITIALLY_)
                    self.state = 615
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DEFERRED_ or _la==SQLiteParser.IMMEDIATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(SQLiteParser.ON_)
            self.state = 621
            self.match(SQLiteParser.CONFLICT_)
            self.state = 622
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def OF_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF_)
            else:
                return self.getToken(SQLiteParser.OF_, i)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(SQLiteParser.CREATE_)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 625
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 628
            self.match(SQLiteParser.TRIGGER_)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(SQLiteParser.IF_)
                self.state = 630
                self.match(SQLiteParser.NOT_)
                self.state = 631
                self.match(SQLiteParser.EXISTS_)


            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 634
                self.schema_name()
                self.state = 635
                self.match(SQLiteParser.DOT)


            self.state = 639
            self.trigger_name()
            self.state = 644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.BEFORE_]:
                self.state = 640
                self.match(SQLiteParser.BEFORE_)
                pass
            elif token in [SQLiteParser.AFTER_]:
                self.state = 641
                self.match(SQLiteParser.AFTER_)
                pass
            elif token in [SQLiteParser.INSTEAD_]:
                self.state = 642
                self.match(SQLiteParser.INSTEAD_)
                self.state = 643
                self.match(SQLiteParser.OF_)
                pass
            elif token in [SQLiteParser.DELETE_, SQLiteParser.INSERT_, SQLiteParser.UPDATE_]:
                pass
            else:
                pass
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.DELETE_]:
                self.state = 646
                self.match(SQLiteParser.DELETE_)
                pass
            elif token in [SQLiteParser.INSERT_]:
                self.state = 647
                self.match(SQLiteParser.INSERT_)
                pass
            elif token in [SQLiteParser.UPDATE_]:
                self.state = 648
                self.match(SQLiteParser.UPDATE_)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OF_:
                    self.state = 649
                    self.match(SQLiteParser.OF_)
                    self.state = 650
                    self.column_name()
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 651
                        self.match(SQLiteParser.COMMA)
                        self.state = 652
                        self.column_name()
                        self.state = 657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 662
            self.match(SQLiteParser.ON_)
            self.state = 663
            self.table_name()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FOR_:
                self.state = 664
                self.match(SQLiteParser.FOR_)
                self.state = 665
                self.match(SQLiteParser.EACH_)
                self.state = 666
                self.match(SQLiteParser.ROW_)


            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHEN_:
                self.state = 669
                self.match(SQLiteParser.WHEN_)
                self.state = 670
                self.expr(0)


            self.state = 673
            self.match(SQLiteParser.BEGIN_)
            self.state = 682 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 674
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 675
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 676
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 677
                    self.select_stmt()
                    pass


                self.state = 680
                self.match(SQLiteParser.SCOL)
                self.state = 684 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.DEFAULT_ or _la==SQLiteParser.DELETE_ or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.INSERT_ - 88)) | (1 << (SQLiteParser.REPLACE_ - 88)) | (1 << (SQLiteParser.SELECT_ - 88)) | (1 << (SQLiteParser.UPDATE_ - 88)) | (1 << (SQLiteParser.VALUES_ - 88)) | (1 << (SQLiteParser.WITH_ - 88)))) != 0)):
                    break

            self.state = 686
            self.match(SQLiteParser.END_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(SQLiteParser.CREATE_)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 689
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 692
            self.match(SQLiteParser.VIEW_)
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 693
                self.match(SQLiteParser.IF_)
                self.state = 694
                self.match(SQLiteParser.NOT_)
                self.state = 695
                self.match(SQLiteParser.EXISTS_)


            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 698
                self.schema_name()
                self.state = 699
                self.match(SQLiteParser.DOT)


            self.state = 703
            self.view_name()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 704
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 705
                self.column_name()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 706
                    self.match(SQLiteParser.COMMA)
                    self.state = 707
                    self.column_name()
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 713
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 717
            self.match(SQLiteParser.AS_)
            self.state = 718
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(SQLiteParser.CREATE_)
            self.state = 721
            self.match(SQLiteParser.VIRTUAL_)
            self.state = 722
            self.match(SQLiteParser.TABLE_)
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 723
                self.match(SQLiteParser.IF_)
                self.state = 724
                self.match(SQLiteParser.NOT_)
                self.state = 725
                self.match(SQLiteParser.EXISTS_)


            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 728
                self.schema_name()
                self.state = 729
                self.match(SQLiteParser.DOT)


            self.state = 733
            self.table_name()
            self.state = 734
            self.match(SQLiteParser.USING_)
            self.state = 735
            self.module_name()
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 736
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 737
                self.module_argument()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 738
                    self.match(SQLiteParser.COMMA)
                    self.state = 739
                    self.module_argument()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 745
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(SQLiteParser.WITH_)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 750
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 753
            self.cte_table_name()
            self.state = 754
            self.match(SQLiteParser.AS_)
            self.state = 755
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 756
            self.select_stmt()
            self.state = 757
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 758
                self.match(SQLiteParser.COMMA)
                self.state = 759
                self.cte_table_name()
                self.state = 760
                self.match(SQLiteParser.AS_)
                self.state = 761
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 762
                self.select_stmt()
                self.state = 763
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.table_name()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 771
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 772
                self.column_name()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 773
                    self.match(SQLiteParser.COMMA)
                    self.state = 774
                    self.column_name()
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 780
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def recursive__select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive__selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.cte_table_name()
            self.state = 785
            self.match(SQLiteParser.AS_)
            self.state = 786
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 787
            self.initial_select()
            self.state = 788
            self.match(SQLiteParser.UNION_)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ALL_:
                self.state = 789
                self.match(SQLiteParser.ALL_)


            self.state = 792
            self.recursive__select()
            self.state = 793
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.table_name()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 796
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 797
                self.column_name()
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 798
                    self.match(SQLiteParser.COMMA)
                    self.state = 799
                    self.column_name()
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 805
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 809
            self.match(SQLiteParser.AS_)
            self.state = 810
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 811
            self.select_stmt()
            self.state = 812
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 814
                self.with_clause()


            self.state = 817
            self.match(SQLiteParser.DELETE_)
            self.state = 818
            self.match(SQLiteParser.FROM_)
            self.state = 819
            self.qualified_table_name()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 820
                self.match(SQLiteParser.WHERE_)
                self.state = 821
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 824
                self.with_clause()


            self.state = 827
            self.match(SQLiteParser.DELETE_)
            self.state = 828
            self.match(SQLiteParser.FROM_)
            self.state = 829
            self.qualified_table_name()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 830
                self.match(SQLiteParser.WHERE_)
                self.state = 831
                self.expr(0)


            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_ or _la==SQLiteParser.ORDER_:
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 834
                    self.order_by_stmt()


                self.state = 837
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(SQLiteParser.DETACH_)
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 841
                self.match(SQLiteParser.DATABASE_)


            self.state = 844
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object_ = None # Token

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(SQLiteParser.DROP_)
            self.state = 847
            localctx.object_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SQLiteParser.INDEX_ - 84)) | (1 << (SQLiteParser.TABLE_ - 84)) | (1 << (SQLiteParser.TRIGGER_ - 84)) | (1 << (SQLiteParser.VIEW_ - 84)))) != 0)):
                localctx.object_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 848
                self.match(SQLiteParser.IF_)
                self.state = 849
                self.match(SQLiteParser.EXISTS_)


            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 852
                self.schema_name()
                self.state = 853
                self.match(SQLiteParser.DOT)


            self.state = 857
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN_)
            else:
                return self.getToken(SQLiteParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN_)
            else:
                return self.getToken(SQLiteParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 860
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 861
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        self.state = 862
                        self.schema_name()
                        self.state = 863
                        self.match(SQLiteParser.DOT)


                    self.state = 867
                    self.table_name()
                    self.state = 868
                    self.match(SQLiteParser.DOT)


                self.state = 872
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 873
                self.unary_operator()
                self.state = 874
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 876
                self.function_name()
                self.state = 877
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 879
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 878
                        self.match(SQLiteParser.DISTINCT_)


                    self.state = 881
                    self.expr(0)
                    self.state = 886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 882
                        self.match(SQLiteParser.COMMA)
                        self.state = 883
                        self.expr(0)
                        self.state = 888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 889
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 892
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 893
                    self.filter_clause()


                self.state = 897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 896
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 899
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 900
                self.expr(0)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 901
                    self.match(SQLiteParser.COMMA)
                    self.state = 902
                    self.expr(0)
                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 908
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 910
                self.match(SQLiteParser.CAST_)
                self.state = 911
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 912
                self.expr(0)
                self.state = 913
                self.match(SQLiteParser.AS_)
                self.state = 914
                self.type_name()
                self.state = 915
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.EXISTS_ or _la==SQLiteParser.NOT_:
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.NOT_:
                        self.state = 917
                        self.match(SQLiteParser.NOT_)


                    self.state = 920
                    self.match(SQLiteParser.EXISTS_)


                self.state = 923
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 924
                self.select_stmt()
                self.state = 925
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 927
                self.match(SQLiteParser.CASE_)
                self.state = 929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 928
                    self.expr(0)


                self.state = 936 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 931
                    self.match(SQLiteParser.WHEN_)
                    self.state = 932
                    self.expr(0)
                    self.state = 933
                    self.match(SQLiteParser.THEN_)
                    self.state = 934
                    self.expr(0)
                    self.state = 938 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.WHEN_):
                        break

                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ELSE_:
                    self.state = 940
                    self.match(SQLiteParser.ELSE_)
                    self.state = 941
                    self.expr(0)


                self.state = 944
                self.match(SQLiteParser.END_)
                pass

            elif la_ == 10:
                self.state = 946
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1066
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 949
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 950
                        self.match(SQLiteParser.PIPE2)
                        self.state = 951
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 952
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 953
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 954
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 955
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 956
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 957
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 958
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 959
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 960
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 961
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 962
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 963
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 964
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 977
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                        if la_ == 1:
                            self.state = 965
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 966
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 967
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 968
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 969
                            self.match(SQLiteParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 970
                            self.match(SQLiteParser.IS_)
                            self.state = 971
                            self.match(SQLiteParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 972
                            self.match(SQLiteParser.IN_)
                            pass

                        elif la_ == 8:
                            self.state = 973
                            self.match(SQLiteParser.LIKE_)
                            pass

                        elif la_ == 9:
                            self.state = 974
                            self.match(SQLiteParser.GLOB_)
                            pass

                        elif la_ == 10:
                            self.state = 975
                            self.match(SQLiteParser.MATCH_)
                            pass

                        elif la_ == 11:
                            self.state = 976
                            self.match(SQLiteParser.REGEXP_)
                            pass


                        self.state = 979
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 980
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 981
                        self.match(SQLiteParser.AND_)
                        self.state = 982
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 983
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 984
                        self.match(SQLiteParser.OR_)
                        self.state = 985
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 986
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 987
                        self.match(SQLiteParser.IS_)
                        self.state = 989
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 988
                            self.match(SQLiteParser.NOT_)


                        self.state = 991
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 992
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 994
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 993
                            self.match(SQLiteParser.NOT_)


                        self.state = 996
                        self.match(SQLiteParser.BETWEEN_)
                        self.state = 997
                        self.expr(0)
                        self.state = 998
                        self.match(SQLiteParser.AND_)
                        self.state = 999
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1001
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1002
                        self.match(SQLiteParser.COLLATE_)
                        self.state = 1003
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1004
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 1005
                            self.match(SQLiteParser.NOT_)


                        self.state = 1008
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB_ - 77)) | (1 << (SQLiteParser.LIKE_ - 77)) | (1 << (SQLiteParser.MATCH_ - 77)) | (1 << (SQLiteParser.REGEXP_ - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1009
                        self.expr(0)
                        self.state = 1012
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1010
                            self.match(SQLiteParser.ESCAPE_)
                            self.state = 1011
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1014
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1019
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.ISNULL_]:
                            self.state = 1015
                            self.match(SQLiteParser.ISNULL_)
                            pass
                        elif token in [SQLiteParser.NOTNULL_]:
                            self.state = 1016
                            self.match(SQLiteParser.NOTNULL_)
                            pass
                        elif token in [SQLiteParser.NOT_]:
                            self.state = 1017
                            self.match(SQLiteParser.NOT_)
                            self.state = 1018
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1021
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 1022
                            self.match(SQLiteParser.NOT_)


                        self.state = 1025
                        self.match(SQLiteParser.IN_)
                        self.state = 1064
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                        if la_ == 1:
                            self.state = 1026
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1036
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                            if la_ == 1:
                                self.state = 1027
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1028
                                self.expr(0)
                                self.state = 1033
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1029
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1030
                                    self.expr(0)
                                    self.state = 1035
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1038
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1042
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                            if la_ == 1:
                                self.state = 1039
                                self.schema_name()
                                self.state = 1040
                                self.match(SQLiteParser.DOT)


                            self.state = 1044
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1048
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                            if la_ == 1:
                                self.state = 1045
                                self.schema_name()
                                self.state = 1046
                                self.match(SQLiteParser.DOT)


                            self.state = 1050
                            self.table_function_name()
                            self.state = 1051
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1060
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0):
                                self.state = 1052
                                self.expr(0)
                                self.state = 1057
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1053
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1054
                                    self.expr(0)
                                    self.state = 1059
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1062
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(SQLiteParser.RAISE_)
            self.state = 1072
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IGNORE_]:
                self.state = 1073
                self.match(SQLiteParser.IGNORE_)
                pass
            elif token in [SQLiteParser.ABORT_, SQLiteParser.FAIL_, SQLiteParser.ROLLBACK_]:
                self.state = 1074
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or _la==SQLiteParser.FAIL_ or _la==SQLiteParser.ROLLBACK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1075
                self.match(SQLiteParser.COMMA)
                self.state = 1076
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1079
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE_ - 52)) | (1 << (SQLiteParser.CURRENT_TIME_ - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 52)) | (1 << (SQLiteParser.NULL_ - 52)))) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (SQLiteParser.TRUE_ - 171)) | (1 << (SQLiteParser.FALSE_ - 171)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 171)) | (1 << (SQLiteParser.STRING_LITERAL - 171)) | (1 << (SQLiteParser.BLOB_LITERAL - 171)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INSERT_, SQLiteParser.REPLACE_, SQLiteParser.WITH_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITH_:
                    self.state = 1083
                    self.with_clause()


                self.state = 1091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1086
                    self.match(SQLiteParser.INSERT_)
                    pass

                elif la_ == 2:
                    self.state = 1087
                    self.match(SQLiteParser.REPLACE_)
                    pass

                elif la_ == 3:
                    self.state = 1088
                    self.match(SQLiteParser.INSERT_)
                    self.state = 1089
                    self.match(SQLiteParser.OR_)
                    self.state = 1090
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 1093
                self.match(SQLiteParser.INTO_)
                self.state = 1097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1094
                    self.schema_name()
                    self.state = 1095
                    self.match(SQLiteParser.DOT)


                self.state = 1099
                self.table_name()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS_:
                    self.state = 1100
                    self.match(SQLiteParser.AS_)
                    self.state = 1101
                    self.table_alias()


                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR:
                    self.state = 1104
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1105
                    self.column_name()
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1106
                        self.match(SQLiteParser.COMMA)
                        self.state = 1107
                        self.column_name()
                        self.state = 1112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1113
                    self.match(SQLiteParser.CLOSE_PAR)


                self.state = 1146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1117
                    self.match(SQLiteParser.VALUES_)
                    self.state = 1118
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1119
                    self.expr(0)
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1120
                        self.match(SQLiteParser.COMMA)
                        self.state = 1121
                        self.expr(0)
                        self.state = 1126
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1127
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1128
                        self.match(SQLiteParser.COMMA)
                        self.state = 1129
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1130
                        self.expr(0)
                        self.state = 1135
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1131
                            self.match(SQLiteParser.COMMA)
                            self.state = 1132
                            self.expr(0)
                            self.state = 1137
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1138
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1145
                    self.select_stmt()
                    pass


                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 1148
                    self.upsert_clause()


                pass
            elif token in [SQLiteParser.DEFAULT_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(SQLiteParser.DEFAULT_)
                self.state = 1152
                self.match(SQLiteParser.VALUES_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def DO_(self):
            return self.getToken(SQLiteParser.DO_, 0)

        def NOTHING_(self):
            return self.getToken(SQLiteParser.NOTHING_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EQ)
            else:
                return self.getToken(SQLiteParser.EQ, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE_)
            else:
                return self.getToken(SQLiteParser.WHERE_, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(SQLiteParser.ON_)
            self.state = 1156
            self.match(SQLiteParser.CONFLICT_)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1157
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1158
                self.indexed_column()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1159
                    self.match(SQLiteParser.COMMA)
                    self.state = 1160
                    self.indexed_column()
                    self.state = 1165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1166
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1167
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1168
                    self.expr(0)




            self.state = 1173
            self.match(SQLiteParser.DO_)
            self.state = 1200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NOTHING_]:
                self.state = 1174
                self.match(SQLiteParser.NOTHING_)
                pass
            elif token in [SQLiteParser.UPDATE_]:
                self.state = 1175
                self.match(SQLiteParser.UPDATE_)
                self.state = 1176
                self.match(SQLiteParser.SET_)

                self.state = 1179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1177
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1178
                    self.column_name_list()
                    pass


                self.state = 1181
                self.match(SQLiteParser.EQ)
                self.state = 1182
                self.expr(0)
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1183
                    self.match(SQLiteParser.COMMA)
                    self.state = 1186
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1184
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1185
                        self.column_name_list()
                        pass


                    self.state = 1188
                    self.match(SQLiteParser.EQ)
                    self.state = 1189
                    self.expr(0)
                    self.state = 1195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1196
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1197
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(SQLiteParser.PRAGMA_)
            self.state = 1206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1203
                self.schema_name()
                self.state = 1204
                self.match(SQLiteParser.DOT)


            self.state = 1208
            self.pragma_name()
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 1209
                self.match(SQLiteParser.ASSIGN)
                self.state = 1210
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 1211
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1212
                self.pragma_value()
                self.state = 1213
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXPLAIN_, SQLiteParser.INSERT_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.UPDATE_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_value)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1219
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(SQLiteParser.REINDEX_)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1223
                self.collation_name()

            elif la_ == 2:
                self.state = 1227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1224
                    self.schema_name()
                    self.state = 1225
                    self.match(SQLiteParser.DOT)


                self.state = 1231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1229
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1230
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1235
                self.common_table_stmt()


            self.state = 1238
            self.select_core()
            self.state = 1244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1239
                    self.compound_operator()
                    self.state = 1240
                    self.select_core() 
                self.state = 1246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1247
                self.order_by_stmt()


            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1250
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.table_or_subquery()
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.CROSS_ or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER_ - 87)) | (1 << (SQLiteParser.JOIN_ - 87)) | (1 << (SQLiteParser.LEFT_ - 87)) | (1 << (SQLiteParser.NATURAL_ - 87)))) != 0):
                self.state = 1254
                self.join_operator()
                self.state = 1255
                self.table_or_subquery()
                self.state = 1257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1256
                    self.join_constraint()


                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.SELECT_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.match(SQLiteParser.SELECT_)
                self.state = 1266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1265
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ALL_ or _la==SQLiteParser.DISTINCT_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1268
                self.result_column()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1269
                    self.match(SQLiteParser.COMMA)
                    self.state = 1270
                    self.result_column()
                    self.state = 1275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FROM_:
                    self.state = 1276
                    self.match(SQLiteParser.FROM_)
                    self.state = 1286
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 1277
                        self.table_or_subquery()
                        self.state = 1282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1278
                            self.match(SQLiteParser.COMMA)
                            self.state = 1279
                            self.table_or_subquery()
                            self.state = 1284
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1285
                        self.join_clause()
                        pass




                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1290
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1291
                    self.expr(0)


                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GROUP_:
                    self.state = 1294
                    self.match(SQLiteParser.GROUP_)
                    self.state = 1295
                    self.match(SQLiteParser.BY_)
                    self.state = 1296
                    self.expr(0)
                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1297
                        self.match(SQLiteParser.COMMA)
                        self.state = 1298
                        self.expr(0)
                        self.state = 1303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.HAVING_:
                        self.state = 1304
                        self.match(SQLiteParser.HAVING_)
                        self.state = 1305
                        self.expr(0)




                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WINDOW_:
                    self.state = 1310
                    self.match(SQLiteParser.WINDOW_)
                    self.state = 1311
                    self.window_name()
                    self.state = 1312
                    self.match(SQLiteParser.AS_)
                    self.state = 1313
                    self.window_defn()
                    self.state = 1321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1314
                        self.match(SQLiteParser.COMMA)
                        self.state = 1315
                        self.window_name()
                        self.state = 1316
                        self.match(SQLiteParser.AS_)
                        self.state = 1317
                        self.window_defn()
                        self.state = 1323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SQLiteParser.VALUES_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.match(SQLiteParser.VALUES_)
                self.state = 1327
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1328
                self.expr(0)
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1329
                    self.match(SQLiteParser.COMMA)
                    self.state = 1330
                    self.expr(0)
                    self.state = 1335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1336
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1337
                    self.match(SQLiteParser.COMMA)
                    self.state = 1338
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1339
                    self.expr(0)
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1340
                        self.match(SQLiteParser.COMMA)
                        self.state = 1341
                        self.expr(0)
                        self.state = 1346
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1347
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1358
                self.common_table_stmt()


            self.state = 1361
            self.select_core()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1362
                self.order_by_stmt()


            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1365
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION_)
            else:
                return self.getToken(SQLiteParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT_)
            else:
                return self.getToken(SQLiteParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT_)
            else:
                return self.getToken(SQLiteParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL_)
            else:
                return self.getToken(SQLiteParser.ALL_, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1368
                self.common_table_stmt()


            self.state = 1371
            self.select_core()
            self.state = 1381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.UNION_]:
                    self.state = 1372
                    self.match(SQLiteParser.UNION_)
                    self.state = 1374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.ALL_:
                        self.state = 1373
                        self.match(SQLiteParser.ALL_)


                    pass
                elif token in [SQLiteParser.INTERSECT_]:
                    self.state = 1376
                    self.match(SQLiteParser.INTERSECT_)
                    pass
                elif token in [SQLiteParser.EXCEPT_]:
                    self.state = 1377
                    self.match(SQLiteParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1380
                self.select_core()
                self.state = 1383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.EXCEPT_ or _la==SQLiteParser.INTERSECT_ or _la==SQLiteParser.UNION_):
                    break

            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1385
                self.order_by_stmt()


            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1388
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.schema_name()
                    self.state = 1392
                    self.match(SQLiteParser.DOT)


                self.state = 1396
                self.table_name()
                self.state = 1401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1398
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                    if la_ == 1:
                        self.state = 1397
                        self.match(SQLiteParser.AS_)


                    self.state = 1400
                    self.table_alias()


                self.state = 1408
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.INDEXED_]:
                    self.state = 1403
                    self.match(SQLiteParser.INDEXED_)
                    self.state = 1404
                    self.match(SQLiteParser.BY_)
                    self.state = 1405
                    self.index_name()
                    pass
                elif token in [SQLiteParser.NOT_]:
                    self.state = 1406
                    self.match(SQLiteParser.NOT_)
                    self.state = 1407
                    self.match(SQLiteParser.INDEXED_)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXCEPT_, SQLiteParser.EXPLAIN_, SQLiteParser.GROUP_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INTERSECT_, SQLiteParser.JOIN_, SQLiteParser.LEFT_, SQLiteParser.LIMIT_, SQLiteParser.NATURAL_, SQLiteParser.ON_, SQLiteParser.ORDER_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.UNION_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WINDOW_]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1410
                    self.schema_name()
                    self.state = 1411
                    self.match(SQLiteParser.DOT)


                self.state = 1415
                self.table_function_name()
                self.state = 1416
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1417
                self.expr(0)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1418
                    self.match(SQLiteParser.COMMA)
                    self.state = 1419
                    self.expr(0)
                    self.state = 1424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1425
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1427
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1426
                        self.match(SQLiteParser.AS_)


                    self.state = 1429
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1432
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1433
                    self.table_or_subquery()
                    self.state = 1438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1434
                        self.match(SQLiteParser.COMMA)
                        self.state = 1435
                        self.table_or_subquery()
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1441
                    self.join_clause()
                    pass


                self.state = 1444
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1446
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1447
                self.select_stmt()
                self.state = 1448
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                    if la_ == 1:
                        self.state = 1449
                        self.match(SQLiteParser.AS_)


                    self.state = 1452
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.table_name()
                self.state = 1459
                self.match(SQLiteParser.DOT)
                self.state = 1460
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1462
                self.expr(0)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS_ or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.AS_:
                        self.state = 1463
                        self.match(SQLiteParser.AS_)


                    self.state = 1466
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1471
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.CROSS_, SQLiteParser.INNER_, SQLiteParser.JOIN_, SQLiteParser.LEFT_, SQLiteParser.NATURAL_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NATURAL_:
                    self.state = 1472
                    self.match(SQLiteParser.NATURAL_)


                self.state = 1481
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.LEFT_]:
                    self.state = 1475
                    self.match(SQLiteParser.LEFT_)
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER_:
                        self.state = 1476
                        self.match(SQLiteParser.OUTER_)


                    pass
                elif token in [SQLiteParser.INNER_]:
                    self.state = 1479
                    self.match(SQLiteParser.INNER_)
                    pass
                elif token in [SQLiteParser.CROSS_]:
                    self.state = 1480
                    self.match(SQLiteParser.CROSS_)
                    pass
                elif token in [SQLiteParser.JOIN_]:
                    pass
                else:
                    pass
                self.state = 1483
                self.match(SQLiteParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ON_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1486
                self.match(SQLiteParser.ON_)
                self.state = 1487
                self.expr(0)
                pass
            elif token in [SQLiteParser.USING_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.match(SQLiteParser.USING_)
                self.state = 1489
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1490
                self.column_name()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1491
                    self.match(SQLiteParser.COMMA)
                    self.state = 1492
                    self.column_name()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1498
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.UNION_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1502
                self.match(SQLiteParser.UNION_)
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ALL_:
                    self.state = 1503
                    self.match(SQLiteParser.ALL_)


                pass
            elif token in [SQLiteParser.INTERSECT_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1506
                self.match(SQLiteParser.INTERSECT_)
                pass
            elif token in [SQLiteParser.EXCEPT_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1507
                self.match(SQLiteParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1510
                self.with_clause()


            self.state = 1513
            self.match(SQLiteParser.UPDATE_)
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1514
                self.match(SQLiteParser.OR_)
                self.state = 1515
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1518
            self.qualified_table_name()
            self.state = 1519
            self.match(SQLiteParser.SET_)
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1520
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1521
                self.column_name_list()
                pass


            self.state = 1524
            self.match(SQLiteParser.ASSIGN)
            self.state = 1525
            self.expr(0)
            self.state = 1536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1526
                self.match(SQLiteParser.COMMA)
                self.state = 1529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1527
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1528
                    self.column_name_list()
                    pass


                self.state = 1531
                self.match(SQLiteParser.ASSIGN)
                self.state = 1532
                self.expr(0)
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 1539
                self.match(SQLiteParser.WHERE_)
                self.state = 1540
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1544
            self.column_name()
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1545
                self.match(SQLiteParser.COMMA)
                self.state = 1546
                self.column_name()
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1554
                self.with_clause()


            self.state = 1557
            self.match(SQLiteParser.UPDATE_)
            self.state = 1560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1558
                self.match(SQLiteParser.OR_)
                self.state = 1559
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1562
            self.qualified_table_name()
            self.state = 1563
            self.match(SQLiteParser.SET_)
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1564
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1565
                self.column_name_list()
                pass


            self.state = 1568
            self.match(SQLiteParser.ASSIGN)
            self.state = 1569
            self.expr(0)
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1570
                self.match(SQLiteParser.COMMA)
                self.state = 1573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1571
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1572
                    self.column_name_list()
                    pass


                self.state = 1575
                self.match(SQLiteParser.ASSIGN)
                self.state = 1576
                self.expr(0)
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 1583
                self.match(SQLiteParser.WHERE_)
                self.state = 1584
                self.expr(0)


            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_ or _la==SQLiteParser.ORDER_:
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1587
                    self.order_by_stmt()


                self.state = 1590
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1593
                self.schema_name()
                self.state = 1594
                self.match(SQLiteParser.DOT)


            self.state = 1598
            self.table_name()
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.AS_:
                self.state = 1599
                self.match(SQLiteParser.AS_)
                self.state = 1600
                self.alias()


            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INDEXED_]:
                self.state = 1603
                self.match(SQLiteParser.INDEXED_)
                self.state = 1604
                self.match(SQLiteParser.BY_)
                self.state = 1605
                self.index_name()
                pass
            elif token in [SQLiteParser.NOT_]:
                self.state = 1606
                self.match(SQLiteParser.NOT_)
                self.state = 1607
                self.match(SQLiteParser.INDEXED_)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXPLAIN_, SQLiteParser.INSERT_, SQLiteParser.LIMIT_, SQLiteParser.ORDER_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.UPDATE_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WHERE_, SQLiteParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(SQLiteParser.VACUUM_)
            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1611
                self.schema_name()


            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.INTO_:
                self.state = 1614
                self.match(SQLiteParser.INTO_)
                self.state = 1615
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(SQLiteParser.FILTER_)
            self.state = 1619
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1620
            self.match(SQLiteParser.WHERE_)
            self.state = 1621
            self.expr(0)
            self.state = 1622
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1625
                self.base_window_name()


            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PARTITION_:
                self.state = 1628
                self.match(SQLiteParser.PARTITION_)
                self.state = 1629
                self.match(SQLiteParser.BY_)
                self.state = 1630
                self.expr(0)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1631
                    self.match(SQLiteParser.COMMA)
                    self.state = 1632
                    self.expr(0)
                    self.state = 1637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1640
            self.match(SQLiteParser.ORDER_)
            self.state = 1641
            self.match(SQLiteParser.BY_)
            self.state = 1642
            self.ordering_term()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1643
                self.match(SQLiteParser.COMMA)
                self.state = 1644
                self.ordering_term()
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                self.state = 1650
                self.frame_spec()


            self.state = 1653
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(SQLiteParser.OVER_)
            self.state = 1689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1656
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1657
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1658
                    self.base_window_name()


                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1661
                    self.match(SQLiteParser.PARTITION_)
                    self.state = 1662
                    self.match(SQLiteParser.BY_)
                    self.state = 1663
                    self.expr(0)
                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1664
                        self.match(SQLiteParser.COMMA)
                        self.state = 1665
                        self.expr(0)
                        self.state = 1670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1673
                    self.match(SQLiteParser.ORDER_)
                    self.state = 1674
                    self.match(SQLiteParser.BY_)
                    self.state = 1675
                    self.ordering_term()
                    self.state = 1680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1676
                        self.match(SQLiteParser.COMMA)
                        self.state = 1677
                        self.ordering_term()
                        self.state = 1682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1685
                    self.frame_spec()


                self.state = 1688
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(SQLiteParser.TIES_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(SQLiteParser.OTHERS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.frame_clause()
            self.state = 1699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.EXCLUDE_]:
                self.state = 1692
                self.match(SQLiteParser.EXCLUDE_)

                self.state = 1693
                self.match(SQLiteParser.NO_)
                self.state = 1694
                self.match(SQLiteParser.OTHERS_)
                pass
            elif token in [SQLiteParser.CURRENT_]:
                self.state = 1695
                self.match(SQLiteParser.CURRENT_)
                self.state = 1696
                self.match(SQLiteParser.ROW_)
                pass
            elif token in [SQLiteParser.GROUP_]:
                self.state = 1697
                self.match(SQLiteParser.GROUP_)
                pass
            elif token in [SQLiteParser.TIES_]:
                self.state = 1698
                self.match(SQLiteParser.TIES_)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            _la = self._input.LA(1)
            if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 1702
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1703
                self.match(SQLiteParser.BETWEEN_)
                self.state = 1704
                self.frame_left()
                self.state = 1705
                self.match(SQLiteParser.AND_)
                self.state = 1706
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.simple_func()
            self.state = 1711
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1712
                self.expr(0)
                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1713
                    self.match(SQLiteParser.COMMA)
                    self.state = 1714
                    self.expr(0)
                    self.state = 1719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1720
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1723
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.aggregate_func()
            self.state = 1726
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 1727
                    self.match(SQLiteParser.DISTINCT_)


                self.state = 1730
                self.expr(0)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1731
                    self.match(SQLiteParser.COMMA)
                    self.state = 1732
                    self.expr(0)
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1738
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1741
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER_:
                self.state = 1742
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.window_function()
            self.state = 1746
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1747
                self.expr(0)
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1748
                    self.match(SQLiteParser.COMMA)
                    self.state = 1749
                    self.expr(0)
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1755
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1758
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER_:
                self.state = 1759
                self.filter_clause()


            self.state = 1762
            self.match(SQLiteParser.OVER_)
            self.state = 1765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 1763
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1764
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self.match(SQLiteParser.WITH_)
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1768
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 1771
            self.common_table_expression()
            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1772
                self.match(SQLiteParser.COMMA)
                self.state = 1773
                self.common_table_expression()
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(SQLiteParser.ORDER_)
            self.state = 1780
            self.match(SQLiteParser.BY_)
            self.state = 1781
            self.ordering_term()
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1782
                self.match(SQLiteParser.COMMA)
                self.state = 1783
                self.ordering_term()
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(SQLiteParser.LIMIT_)
            self.state = 1790
            self.expr(0)
            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET_:
                self.state = 1791
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1792
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.expr(0)
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE_:
                self.state = 1796
                self.match(SQLiteParser.COLLATE_)
                self.state = 1797
                self.collation_name()


            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 1800
                self.asc_desc()


            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.NULLS_:
                self.state = 1803
                self.match(SQLiteParser.NULLS_)
                self.state = 1804
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_ or _la==SQLiteParser.LAST_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_frame_left)
        try:
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1809
                self.expr(0)
                self.state = 1810
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.expr(0)
                self.state = 1813
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1815
                self.match(SQLiteParser.CURRENT_)
                self.state = 1816
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1817
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1818
                self.match(SQLiteParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_frame_right)
        try:
            self.state = 1831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1821
                self.expr(0)
                self.state = 1822
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1824
                self.expr(0)
                self.state = 1825
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1827
                self.match(SQLiteParser.CURRENT_)
                self.state = 1828
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1829
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1830
                self.match(SQLiteParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_frame_single)
        try:
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.expr(0)
                self.state = 1834
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1837
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1838
                self.match(SQLiteParser.CURRENT_)
                self.state = 1839
                self.match(SQLiteParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def of_OF_fset(self):
            return self.getTypedRuleContext(SQLiteParser.Of_OF_fsetContext,0)


        def default_DEFAULT__value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_DEFAULT__valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.FIRST_VALUE_, SQLiteParser.LAST_VALUE_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_VALUE_ or _la==SQLiteParser.LAST_VALUE_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1843
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1844
                self.expr(0)
                self.state = 1845
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1846
                self.match(SQLiteParser.OVER_)
                self.state = 1847
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1848
                    self.partition_by()


                self.state = 1851
                self.order_by_expr_asc_desc()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1852
                    self.frame_clause()


                self.state = 1855
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.CUME_DIST_, SQLiteParser.PERCENT_RANK_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.CUME_DIST_ or _la==SQLiteParser.PERCENT_RANK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1858
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1859
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1860
                self.match(SQLiteParser.OVER_)
                self.state = 1861
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1862
                    self.partition_by()


                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1865
                    self.order_by_expr()


                self.state = 1868
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DENSE_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1869
                _la = self._input.LA(1)
                if not(((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (SQLiteParser.DENSE_RANK_ - 159)) | (1 << (SQLiteParser.RANK_ - 159)) | (1 << (SQLiteParser.ROW_NUMBER_ - 159)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1870
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1871
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1872
                self.match(SQLiteParser.OVER_)
                self.state = 1873
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1874
                    self.partition_by()


                self.state = 1877
                self.order_by_expr_asc_desc()
                self.state = 1878
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.LAG_, SQLiteParser.LEAD_]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1880
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.LAG_ or _la==SQLiteParser.LEAD_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1881
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1882
                self.expr(0)
                self.state = 1884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 1883
                    self.of_OF_fset()


                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA:
                    self.state = 1886
                    self.default_DEFAULT__value()


                self.state = 1889
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1890
                self.match(SQLiteParser.OVER_)
                self.state = 1891
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1892
                    self.partition_by()


                self.state = 1895
                self.order_by_expr_asc_desc()
                self.state = 1896
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTH_VALUE_]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1898
                self.match(SQLiteParser.NTH_VALUE_)
                self.state = 1899
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1900
                self.expr(0)
                self.state = 1901
                self.match(SQLiteParser.COMMA)
                self.state = 1902
                self.signed_number()
                self.state = 1903
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1904
                self.match(SQLiteParser.OVER_)
                self.state = 1905
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1906
                    self.partition_by()


                self.state = 1909
                self.order_by_expr_asc_desc()
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1910
                    self.frame_clause()


                self.state = 1913
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTILE_]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1915
                self.match(SQLiteParser.NTILE_)
                self.state = 1916
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1917
                self.expr(0)
                self.state = 1918
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1919
                self.match(SQLiteParser.OVER_)
                self.state = 1920
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1921
                    self.partition_by()


                self.state = 1924
                self.order_by_expr_asc_desc()
                self.state = 1925
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Of_OF_fsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_of_OF_fset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOf_OF_fset" ):
                listener.enterOf_OF_fset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOf_OF_fset" ):
                listener.exitOf_OF_fset(self)




    def of_OF_fset(self):

        localctx = SQLiteParser.Of_OF_fsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_of_OF_fset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(SQLiteParser.COMMA)
            self.state = 1930
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_DEFAULT__valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_DEFAULT__value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_DEFAULT__value" ):
                listener.enterDefault_DEFAULT__value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_DEFAULT__value" ):
                listener.exitDefault_DEFAULT__value(self)




    def default_DEFAULT__value(self):

        localctx = SQLiteParser.Default_DEFAULT__valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_default_DEFAULT__value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1932
            self.match(SQLiteParser.COMMA)
            self.state = 1933
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.match(SQLiteParser.PARTITION_)
            self.state = 1936
            self.match(SQLiteParser.BY_)
            self.state = 1938 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1937
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1940 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(SQLiteParser.ORDER_)
            self.state = 1943
            self.match(SQLiteParser.BY_)
            self.state = 1945 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1944
                self.expr(0)
                self.state = 1947 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(SQLiteParser.ORDER_)
            self.state = 1950
            self.match(SQLiteParser.BY_)
            self.state = 1951
            self.order_by_expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.expr(0)
            self.state = 1955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 1954
                self.asc_desc()


            self.state = 1964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1957
                self.match(SQLiteParser.COMMA)
                self.state = 1958
                self.expr(0)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                    self.state = 1959
                    self.asc_desc()


                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive__selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive__select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive__select" ):
                listener.enterRecursive__select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive__select" ):
                listener.exitRecursive__select(self)




    def recursive__select(self):

        localctx = SQLiteParser.Recursive__selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_recursive__select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1971
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.NOT_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_module_argument)
        try:
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def ACTION_(self):
            return self.getToken(SQLiteParser.ACTION_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def CASCADE_(self):
            return self.getToken(SQLiteParser.CASCADE_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(SQLiteParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF_(self):
            return self.getToken(SQLiteParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def RESTRICT_(self):
            return self.getToken(SQLiteParser.RESTRICT_, 0)

        def RIGHT_(self):
            return self.getToken(SQLiteParser.RIGHT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def THEN_(self):
            return self.getToken(SQLiteParser.THEN_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2023
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_any_name)
        try:
            self.state = 2038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2031
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2032
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2033
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2034
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2035
                self.any_name()
                self.state = 2036
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




